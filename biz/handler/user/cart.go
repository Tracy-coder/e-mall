// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/Tracy-coder/e-mall/biz/domain"
	"github.com/Tracy-coder/e-mall/biz/logic"
	base "github.com/Tracy-coder/e-mall/biz/model/base"
	user "github.com/Tracy-coder/e-mall/biz/model/user"
	"github.com/Tracy-coder/e-mall/data"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
)

// CreateCart .
// @router /api/v1/user/carts [POST]
func CreateCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateCartReq
	err = c.BindAndValidate(&req)
	resp := new(user.CreateCartResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	createCartReq := new(domain.CreateCartReq)
	err = copier.Copy(createCartReq, &req)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusUnauthorized, resp)
		return
	}
	createCartReq.UserID = userID
	info, err := logic.NewCart(data.Default()).CreateCart(ctx, *createCartReq)
	if err != nil {
		resp.ErrCode = base.ErrCode_CreateCartError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	cartInfo := new(user.CartInfo)
	err = copier.Copy(cartInfo, info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	resp.Info = cartInfo
	c.JSON(consts.StatusOK, resp)
}

// ShowCart .
// @router /api/v1/user/carts [GET]
func ShowCart(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(user.ShowCartResp)
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusUnauthorized, resp)
		return
	}
	info, err := logic.NewCart(data.Default()).ShowCart(ctx, userID)
	if err != nil {
		resp.ErrCode = base.ErrCode_ShowCartError
		resp.ErrMsg = err.Error()

		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	cartInfo := make([]*user.CartInfo, len(info))
	err = copier.Copy(&cartInfo, &info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()

		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	resp.Info = cartInfo
	c.JSON(consts.StatusOK, resp)
}

// UpdateCart .
// @router /api/v1/user/carts [PUT]
func UpdateCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateCartReq
	resp := new(base.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var updateCartReq domain.UpdateCartReq
	err = copier.Copy(&updateCartReq, &req)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusUnauthorized, resp)
		return
	}
	updateCartReq.UserID = userID
	err = logic.NewCart(data.Default()).UpdateCart(ctx, updateCartReq)

	if err != nil {
		resp.ErrCode = base.ErrCode_UpdateCartError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// DeleteCart .
// @router /api/v1/user/carts [DELETE]
func DeleteCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteCartReq
	err = c.BindAndValidate(&req)
	resp := new(base.BaseResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	userID, err := getUserID(c)
	if err != nil {
		resp.ErrCode = base.ErrCode_UnauthorizedError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusUnauthorized, resp)
		return
	}
	err = logic.NewCart(data.Default()).DeleteCart(ctx, req.ProductID, userID)

	if err != nil {
		resp.ErrCode = base.ErrCode_DeleteCartError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}
