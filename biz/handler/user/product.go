// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/Tracy-coder/e-mall/biz/domain"
	"github.com/Tracy-coder/e-mall/biz/logic"
	"github.com/Tracy-coder/e-mall/biz/model/base"
	pb "github.com/Tracy-coder/e-mall/biz/model/user"
	"github.com/Tracy-coder/e-mall/data"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
)

// CreateProduct .
// @router /api/v2/products [POST]
func CreateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pb.CreateProductReq
	resp := new(pb.CreateProductResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var createProductReq domain.CreateProductReq
	err = copier.Copy(&createProductReq, &req)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	info, err := logic.NewProduct(data.Default()).CreateProduct(ctx, createProductReq)

	if err != nil {
		resp.ErrCode = base.ErrCode_CreateProductError
		resp.ErrMsg = err.Error()
		return
	}
	productInfo := new(pb.ProductInfo)
	err = copier.Copy(productInfo, info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	resp.Product = productInfo
	c.JSON(consts.StatusOK, resp)
}

// ShowProduct .
// @router /api/v2/product [GET]
func ShowProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pb.ShowProductReq
	resp := new(pb.ShowProductResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	info, err := logic.NewProduct(data.Default()).ShowProduct(ctx, req.Id)

	if err != nil {
		resp.ErrCode = base.ErrCode_CreateProductError
		resp.ErrMsg = err.Error()
		return
	}
	productInfo := new(pb.ProductInfo)
	err = copier.Copy(productInfo, info)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	resp.Product = productInfo

	c.JSON(consts.StatusOK, resp)
}

// ListProduct .
// @router /api/v1/products [GET]
func ListProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req pb.ListProductReq
	err = c.BindAndValidate(&req)
	resp := new(pb.ListProductResp)
	if err != nil {
		resp.ErrCode = base.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var listProductReq domain.ListProductReq
	err = copier.Copy(&listProductReq, &req)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	res, err := logic.NewProduct(data.Default()).ListProduct(ctx, listProductReq)
	if err != nil {
		resp.ErrCode = base.ErrCode_ListProductError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	productsInfo := make([]*pb.ProductInfo, len(res))
	err = copier.Copy(&productsInfo, &res)
	if err != nil {
		resp.ErrCode = base.ErrCode_CopierError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Product = productsInfo
	resp.ErrCode = base.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}
