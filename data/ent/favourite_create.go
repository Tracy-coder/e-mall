// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/favourite"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// FavouriteCreate is the builder for creating a Favourite entity.
type FavouriteCreate struct {
	config
	mutation *FavouriteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FavouriteCreate) SetCreatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableCreatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FavouriteCreate) SetUpdatedAt(t time.Time) *FavouriteCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUpdatedAt(t *time.Time) *FavouriteCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetProductID sets the "productID" field.
func (fc *FavouriteCreate) SetProductID(u uint64) *FavouriteCreate {
	fc.mutation.SetProductID(u)
	return fc
}

// SetNillableProductID sets the "productID" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableProductID(u *uint64) *FavouriteCreate {
	if u != nil {
		fc.SetProductID(*u)
	}
	return fc
}

// SetUserID sets the "userID" field.
func (fc *FavouriteCreate) SetUserID(u uint64) *FavouriteCreate {
	fc.mutation.SetUserID(u)
	return fc
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUserID(u *uint64) *FavouriteCreate {
	if u != nil {
		fc.SetUserID(*u)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FavouriteCreate) SetID(u uint64) *FavouriteCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetProductFavouriteID sets the "product_favourite" edge to the Product entity by ID.
func (fc *FavouriteCreate) SetProductFavouriteID(id uint64) *FavouriteCreate {
	fc.mutation.SetProductFavouriteID(id)
	return fc
}

// SetNillableProductFavouriteID sets the "product_favourite" edge to the Product entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableProductFavouriteID(id *uint64) *FavouriteCreate {
	if id != nil {
		fc = fc.SetProductFavouriteID(*id)
	}
	return fc
}

// SetProductFavourite sets the "product_favourite" edge to the Product entity.
func (fc *FavouriteCreate) SetProductFavourite(p *Product) *FavouriteCreate {
	return fc.SetProductFavouriteID(p.ID)
}

// SetUserFavouriteID sets the "user_favourite" edge to the User entity by ID.
func (fc *FavouriteCreate) SetUserFavouriteID(id uint64) *FavouriteCreate {
	fc.mutation.SetUserFavouriteID(id)
	return fc
}

// SetNillableUserFavouriteID sets the "user_favourite" edge to the User entity by ID if the given value is not nil.
func (fc *FavouriteCreate) SetNillableUserFavouriteID(id *uint64) *FavouriteCreate {
	if id != nil {
		fc = fc.SetUserFavouriteID(*id)
	}
	return fc
}

// SetUserFavourite sets the "user_favourite" edge to the User entity.
func (fc *FavouriteCreate) SetUserFavourite(u *User) *FavouriteCreate {
	return fc.SetUserFavouriteID(u.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fc *FavouriteCreate) Mutation() *FavouriteMutation {
	return fc.mutation
}

// Save creates the Favourite in the database.
func (fc *FavouriteCreate) Save(ctx context.Context) (*Favourite, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavouriteCreate) SaveX(ctx context.Context) *Favourite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavouriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavouriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FavouriteCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := favourite.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := favourite.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavouriteCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Favourite.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Favourite.updated_at"`)}
	}
	return nil
}

func (fc *FavouriteCreate) sqlSave(ctx context.Context) (*Favourite, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FavouriteCreate) createSpec() (*Favourite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favourite{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(favourite.Table, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(favourite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.ProductFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductFavouriteTable,
			Columns: []string{favourite.ProductFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.UserFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.UserFavouriteTable,
			Columns: []string{favourite.UserFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FavouriteCreateBulk is the builder for creating many Favourite entities in bulk.
type FavouriteCreateBulk struct {
	config
	err      error
	builders []*FavouriteCreate
}

// Save creates the Favourite entities in the database.
func (fcb *FavouriteCreateBulk) Save(ctx context.Context) ([]*Favourite, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favourite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavouriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) SaveX(ctx context.Context) []*Favourite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavouriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavouriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
