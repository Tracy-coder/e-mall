syntax = "proto3";

package user;
import "api.proto";
import "base.proto";

message UserRegisterReq{
    string nickname = 1;
	  string username = 2;
	  string password = 3;
    string captchaID = 4;
    string captcha = 5;
    string email = 6;
}

message UserLoginReq{
  string username = 1;
  string password = 3;
  string captchaID = 4;
  string captcha = 5;
}

message UserLoginResp {
  string code = 1;
  string token = 2;
  string expire = 3;
}





message Empty {}

message CaptchaInfoResp {
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string captchaID = 3;
  string imgPath = 4;
}

message UserInfoResp {
  base.ErrCode errCode = 1;
  string errMsg = 2;
  uint64 ID = 3;
  string avatar = 4;
  string mobile = 6;
  string email = 7;
  uint64 status = 8;
  string username = 9;
  string nickname = 10;
  string createdAt = 12;
  string updatedAt = 13;
}
message GTLoginResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string loginURL = 3;
}

message GTLoginCallbackReq{
  string code = 1;
}

enum EmailOperation {
  Binding = 0;
  Unbinding = 1;
}

message ValidEmailReq{
 EmailOperation op = 1;
 string email = 2;
}

message ValidEmailResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string email = 3;
  string username = 4;
}

message VerifyEmailReq{
  uint64 email_id  = 1;
  string secret_code = 2;
}
service user{
  rpc Register(UserRegisterReq) returns (base.BaseResp) {
    option (api.post) = "/api/v1/register";
  }
  rpc Captcha(Empty) returns (CaptchaInfoResp){
    option (api.get) = "/api/v1/captcha";
  }
  // rpc Login(UserLoginReq) returns (UserLoginResp){
  //   option (api.post) = "/api/login";
  // }

  //返回的是自己的info
  rpc UserInfo(Empty) returns (UserInfoResp){
    option (api.get) = "/api/v1/user/info";
  }

  rpc GTLogin(Empty) returns (GTLoginResp){
    option (api.get) = "/api/v1/github/login";
  }
  rpc GTLoginCallback(GTLoginCallbackReq) returns (base.BaseResp){
    option (api.get) = "/api/v1/github/login/callback";
  }
  rpc ValidEmail(ValidEmailReq) returns (ValidEmailResp){
    option (api.post) = "/api/v1/user/valid_email";
  }

  rpc VerifyEmail(VerifyEmailReq) returns(base.BaseResp){
    option (api.get) = "/api/v1/verify_email";
  }
}

message CreateProductReq {
	string Name = 1;
	uint64 CategoryID = 2;
	string Title = 3;
	string Info = 4;
	string ImgPath = 5;
  int64 Price = 6;
	int64 DiscountPrice = 7;
}

message ProductInfo{
	string Name = 1;
	uint64 CategoryID = 2;
	string Title = 3;
	string Info = 4;
	string ImgPath = 5;
	int64 DiscountPrice = 6;
  uint64 View = 7;
  uint64 CreatedAt = 8;
}
message CreateProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    ProductInfo product = 3; 
}

message ShowProductReq{
  uint64 id= 1;
}

message ShowProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    ProductInfo product = 3; 
}

message ListProductReq{
	int32 Limit = 1;
	int32 Start = 2;
	uint64 CategoryID = 3;
}

message ListProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    repeated ProductInfo product = 3; 
}

message UpdateProductReq{
  uint64 ID = 1;
	string Name = 2;
	uint64 CategoryID = 3;
	string Title = 4;
	string Info = 5;
	string ImgPath = 6;
  int64 Price = 7;
	int64 DiscountPrice = 8;
}

message DeleteProductReq{
  uint64 id = 1;
}
service product{
    rpc CreateProduct(CreateProductReq)returns(CreateProductResp){
      option (api.post) = "/api/v2/products";
    }

    rpc ShowProduct(ShowProductReq)returns(ShowProductResp){
      option (api.get) = "/api/v1/product";
    }

    rpc ListProduct(ListProductReq)returns(ListProductResp){
      option (api.get) = "/api/v1/products";
    }
    rpc UpdateProduct(UpdateProductReq)returns(base.BaseResp){
      option (api.put) = "/api/v2/product";
    }
    rpc DeleteProduct(DeleteProductReq)returns(base.BaseResp){
      option (api.delete) = "/api/v2/product";
    }
}