syntax = "proto3";

package user;
import "api.proto";

message UserRegisterReq{
    string nickname = 1;
	  string username = 2;
	  string password = 3;
    string captchaID = 4;
    string captcha = 5;
    string email = 6;
}

message UserLoginReq{
  string username = 1;
  string password = 3;
  string captchaID = 4;
  string captcha = 5;
}

message UserLoginResp {
  string code = 1;
  string token = 2;
  string expire = 3;
}


enum ErrCode {
  Success = 0;
  ArgumentError = 1;
  CaptchaError = 2;
  CreateUserError = 3;
  CaptchaMismatchError = 4;
  GetUserInfoError = 5;
  GetUserIdError = 6;
  BindEmailError = 7;
  UnbindEmailError = 8;
  VerifyEmailError = 9;
}

message BaseResp {
  ErrCode errCode = 1;
  string errMsg = 2;
}

message Empty {}

message CaptchaInfoResp {
  ErrCode errCode = 1;
  string errMsg = 2;
  string captchaID = 3;
  string imgPath = 4;
}

message UserInfoResp {
  ErrCode errCode = 1;
  string errMsg = 2;
  uint64 ID = 3;
  string avatar = 4;
  string mobile = 6;
  string email = 7;
  uint64 status = 8;
  string username = 9;
  string nickname = 10;
  string createdAt = 12;
  string updatedAt = 13;
}
message GTLoginResp{
  ErrCode errCode = 1;
  string errMsg = 2;
  string loginURL = 3;
}

message GTLoginCallbackReq{
  string code = 1;
}

enum EmailOperation {
  Binding = 0;
  Unbinding = 1;
}

message ValidEmailReq{
 EmailOperation op = 1;
 string email = 2;
}

message ValidEmailResp{
  ErrCode errCode = 1;
  string errMsg = 2;
  string email = 3;
  string username = 4;
}

message VerifyEmailReq{
  uint64 email_id  = 1;
  string secret_code = 2;
}
service user{
  rpc Register(UserRegisterReq) returns (BaseResp) {
    option (api.post) = "/api/v1/register";
  }
  rpc Captcha(Empty) returns (CaptchaInfoResp){
    option (api.get) = "/api/v1/captcha";
  }
  // rpc Login(UserLoginReq) returns (UserLoginResp){
  //   option (api.post) = "/api/login";
  // }

  //返回的是自己的info
  rpc UserInfo(Empty) returns (UserInfoResp){
    option (api.get) = "/api/v1/user/info";
  }

  rpc GTLogin(Empty) returns (GTLoginResp){
    option (api.get) = "/api/v1/github/login";
  }
  rpc GTLoginCallback(GTLoginCallbackReq) returns (BaseResp){
    option (api.get) = "/api/v1/github/login/callback";
  }
  rpc ValidEmail(ValidEmailReq) returns (ValidEmailResp){
    option (api.post) = "/api/v1/user/valid_email";
  }

  rpc VerifyEmail(VerifyEmailReq) returns(BaseResp){
    option (api.get) = "/api/v1/verify_email";
  }
}
