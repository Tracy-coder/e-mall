// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/carousel"
	"github.com/Tracy-coder/e-mall/data/ent/cart"
	"github.com/Tracy-coder/e-mall/data/ent/category"
	"github.com/Tracy-coder/e-mall/data/ent/favourite"
	"github.com/Tracy-coder/e-mall/data/ent/order"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/productimg"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetCategoryID sets the "categoryID" field.
func (pu *ProductUpdate) SetCategoryID(u uint64) *ProductUpdate {
	pu.mutation.SetCategoryID(u)
	return pu
}

// SetNillableCategoryID sets the "categoryID" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategoryID(u *uint64) *ProductUpdate {
	if u != nil {
		pu.SetCategoryID(*u)
	}
	return pu
}

// ClearCategoryID clears the value of the "categoryID" field.
func (pu *ProductUpdate) ClearCategoryID() *ProductUpdate {
	pu.mutation.ClearCategoryID()
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProductUpdate) SetTitle(s string) *ProductUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTitle(s *string) *ProductUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetInfo sets the "info" field.
func (pu *ProductUpdate) SetInfo(s string) *ProductUpdate {
	pu.mutation.SetInfo(s)
	return pu
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableInfo(s *string) *ProductUpdate {
	if s != nil {
		pu.SetInfo(*s)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(i int64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetPrice(*i)
	}
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *ProductUpdate) AddPrice(i int64) *ProductUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetDiscountPrice sets the "discount_price" field.
func (pu *ProductUpdate) SetDiscountPrice(i int64) *ProductUpdate {
	pu.mutation.ResetDiscountPrice()
	pu.mutation.SetDiscountPrice(i)
	return pu
}

// SetNillableDiscountPrice sets the "discount_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDiscountPrice(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetDiscountPrice(*i)
	}
	return pu
}

// AddDiscountPrice adds i to the "discount_price" field.
func (pu *ProductUpdate) AddDiscountPrice(i int64) *ProductUpdate {
	pu.mutation.AddDiscountPrice(i)
	return pu
}

// ClearDiscountPrice clears the value of the "discount_price" field.
func (pu *ProductUpdate) ClearDiscountPrice() *ProductUpdate {
	pu.mutation.ClearDiscountPrice()
	return pu
}

// AddCarouselIDs adds the "carousels" edge to the Carousel entity by IDs.
func (pu *ProductUpdate) AddCarouselIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddCarouselIDs(ids...)
	return pu
}

// AddCarousels adds the "carousels" edges to the Carousel entity.
func (pu *ProductUpdate) AddCarousels(c ...*Carousel) *ProductUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCarouselIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (pu *ProductUpdate) SetCategory(c *Category) *ProductUpdate {
	return pu.SetCategoryID(c.ID)
}

// AddProductimgIDs adds the "productimgs" edge to the ProductImg entity by IDs.
func (pu *ProductUpdate) AddProductimgIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddProductimgIDs(ids...)
	return pu
}

// AddProductimgs adds the "productimgs" edges to the ProductImg entity.
func (pu *ProductUpdate) AddProductimgs(p ...*ProductImg) *ProductUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductimgIDs(ids...)
}

// AddFavouriteIDs adds the "favourite" edge to the Favourite entity by IDs.
func (pu *ProductUpdate) AddFavouriteIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddFavouriteIDs(ids...)
	return pu
}

// AddFavourite adds the "favourite" edges to the Favourite entity.
func (pu *ProductUpdate) AddFavourite(f ...*Favourite) *ProductUpdate {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFavouriteIDs(ids...)
}

// AddCartIDs adds the "cart" edge to the Cart entity by IDs.
func (pu *ProductUpdate) AddCartIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddCartIDs(ids...)
	return pu
}

// AddCart adds the "cart" edges to the Cart entity.
func (pu *ProductUpdate) AddCart(c ...*Cart) *ProductUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCartIDs(ids...)
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (pu *ProductUpdate) AddOrderIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrder adds the "order" edges to the Order entity.
func (pu *ProductUpdate) AddOrder(o ...*Order) *ProductUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCarousels clears all "carousels" edges to the Carousel entity.
func (pu *ProductUpdate) ClearCarousels() *ProductUpdate {
	pu.mutation.ClearCarousels()
	return pu
}

// RemoveCarouselIDs removes the "carousels" edge to Carousel entities by IDs.
func (pu *ProductUpdate) RemoveCarouselIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveCarouselIDs(ids...)
	return pu
}

// RemoveCarousels removes "carousels" edges to Carousel entities.
func (pu *ProductUpdate) RemoveCarousels(c ...*Carousel) *ProductUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCarouselIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (pu *ProductUpdate) ClearCategory() *ProductUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// ClearProductimgs clears all "productimgs" edges to the ProductImg entity.
func (pu *ProductUpdate) ClearProductimgs() *ProductUpdate {
	pu.mutation.ClearProductimgs()
	return pu
}

// RemoveProductimgIDs removes the "productimgs" edge to ProductImg entities by IDs.
func (pu *ProductUpdate) RemoveProductimgIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveProductimgIDs(ids...)
	return pu
}

// RemoveProductimgs removes "productimgs" edges to ProductImg entities.
func (pu *ProductUpdate) RemoveProductimgs(p ...*ProductImg) *ProductUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductimgIDs(ids...)
}

// ClearFavourite clears all "favourite" edges to the Favourite entity.
func (pu *ProductUpdate) ClearFavourite() *ProductUpdate {
	pu.mutation.ClearFavourite()
	return pu
}

// RemoveFavouriteIDs removes the "favourite" edge to Favourite entities by IDs.
func (pu *ProductUpdate) RemoveFavouriteIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveFavouriteIDs(ids...)
	return pu
}

// RemoveFavourite removes "favourite" edges to Favourite entities.
func (pu *ProductUpdate) RemoveFavourite(f ...*Favourite) *ProductUpdate {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFavouriteIDs(ids...)
}

// ClearCart clears all "cart" edges to the Cart entity.
func (pu *ProductUpdate) ClearCart() *ProductUpdate {
	pu.mutation.ClearCart()
	return pu
}

// RemoveCartIDs removes the "cart" edge to Cart entities by IDs.
func (pu *ProductUpdate) RemoveCartIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveCartIDs(ids...)
	return pu
}

// RemoveCart removes "cart" edges to Cart entities.
func (pu *ProductUpdate) RemoveCart(c ...*Cart) *ProductUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCartIDs(ids...)
}

// ClearOrder clears all "order" edges to the Order entity.
func (pu *ProductUpdate) ClearOrder() *ProductUpdate {
	pu.mutation.ClearOrder()
	return pu
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (pu *ProductUpdate) RemoveOrderIDs(ids ...uint64) *ProductUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrder removes "order" edges to Order entities.
func (pu *ProductUpdate) RemoveOrder(o ...*Order) *ProductUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Info(); ok {
		_spec.SetField(product.FieldInfo, field.TypeString, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.DiscountPrice(); ok {
		_spec.SetField(product.FieldDiscountPrice, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(product.FieldDiscountPrice, field.TypeInt64, value)
	}
	if pu.mutation.DiscountPriceCleared() {
		_spec.ClearField(product.FieldDiscountPrice, field.TypeInt64)
	}
	if pu.mutation.CarouselsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCarouselsIDs(); len(nodes) > 0 && !pu.mutation.CarouselsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CarouselsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductimgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductimgsIDs(); len(nodes) > 0 && !pu.mutation.ProductimgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductimgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFavouriteIDs(); len(nodes) > 0 && !pu.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCartIDs(); len(nodes) > 0 && !pu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderIDs(); len(nodes) > 0 && !pu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetCategoryID sets the "categoryID" field.
func (puo *ProductUpdateOne) SetCategoryID(u uint64) *ProductUpdateOne {
	puo.mutation.SetCategoryID(u)
	return puo
}

// SetNillableCategoryID sets the "categoryID" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategoryID(u *uint64) *ProductUpdateOne {
	if u != nil {
		puo.SetCategoryID(*u)
	}
	return puo
}

// ClearCategoryID clears the value of the "categoryID" field.
func (puo *ProductUpdateOne) ClearCategoryID() *ProductUpdateOne {
	puo.mutation.ClearCategoryID()
	return puo
}

// SetTitle sets the "title" field.
func (puo *ProductUpdateOne) SetTitle(s string) *ProductUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTitle(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetInfo sets the "info" field.
func (puo *ProductUpdateOne) SetInfo(s string) *ProductUpdateOne {
	puo.mutation.SetInfo(s)
	return puo
}

// SetNillableInfo sets the "info" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableInfo(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetInfo(*s)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(i int64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetPrice(*i)
	}
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *ProductUpdateOne) AddPrice(i int64) *ProductUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetDiscountPrice sets the "discount_price" field.
func (puo *ProductUpdateOne) SetDiscountPrice(i int64) *ProductUpdateOne {
	puo.mutation.ResetDiscountPrice()
	puo.mutation.SetDiscountPrice(i)
	return puo
}

// SetNillableDiscountPrice sets the "discount_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDiscountPrice(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetDiscountPrice(*i)
	}
	return puo
}

// AddDiscountPrice adds i to the "discount_price" field.
func (puo *ProductUpdateOne) AddDiscountPrice(i int64) *ProductUpdateOne {
	puo.mutation.AddDiscountPrice(i)
	return puo
}

// ClearDiscountPrice clears the value of the "discount_price" field.
func (puo *ProductUpdateOne) ClearDiscountPrice() *ProductUpdateOne {
	puo.mutation.ClearDiscountPrice()
	return puo
}

// AddCarouselIDs adds the "carousels" edge to the Carousel entity by IDs.
func (puo *ProductUpdateOne) AddCarouselIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddCarouselIDs(ids...)
	return puo
}

// AddCarousels adds the "carousels" edges to the Carousel entity.
func (puo *ProductUpdateOne) AddCarousels(c ...*Carousel) *ProductUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCarouselIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (puo *ProductUpdateOne) SetCategory(c *Category) *ProductUpdateOne {
	return puo.SetCategoryID(c.ID)
}

// AddProductimgIDs adds the "productimgs" edge to the ProductImg entity by IDs.
func (puo *ProductUpdateOne) AddProductimgIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddProductimgIDs(ids...)
	return puo
}

// AddProductimgs adds the "productimgs" edges to the ProductImg entity.
func (puo *ProductUpdateOne) AddProductimgs(p ...*ProductImg) *ProductUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductimgIDs(ids...)
}

// AddFavouriteIDs adds the "favourite" edge to the Favourite entity by IDs.
func (puo *ProductUpdateOne) AddFavouriteIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddFavouriteIDs(ids...)
	return puo
}

// AddFavourite adds the "favourite" edges to the Favourite entity.
func (puo *ProductUpdateOne) AddFavourite(f ...*Favourite) *ProductUpdateOne {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFavouriteIDs(ids...)
}

// AddCartIDs adds the "cart" edge to the Cart entity by IDs.
func (puo *ProductUpdateOne) AddCartIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddCartIDs(ids...)
	return puo
}

// AddCart adds the "cart" edges to the Cart entity.
func (puo *ProductUpdateOne) AddCart(c ...*Cart) *ProductUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCartIDs(ids...)
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (puo *ProductUpdateOne) AddOrderIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrder adds the "order" edges to the Order entity.
func (puo *ProductUpdateOne) AddOrder(o ...*Order) *ProductUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCarousels clears all "carousels" edges to the Carousel entity.
func (puo *ProductUpdateOne) ClearCarousels() *ProductUpdateOne {
	puo.mutation.ClearCarousels()
	return puo
}

// RemoveCarouselIDs removes the "carousels" edge to Carousel entities by IDs.
func (puo *ProductUpdateOne) RemoveCarouselIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveCarouselIDs(ids...)
	return puo
}

// RemoveCarousels removes "carousels" edges to Carousel entities.
func (puo *ProductUpdateOne) RemoveCarousels(c ...*Carousel) *ProductUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCarouselIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (puo *ProductUpdateOne) ClearCategory() *ProductUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// ClearProductimgs clears all "productimgs" edges to the ProductImg entity.
func (puo *ProductUpdateOne) ClearProductimgs() *ProductUpdateOne {
	puo.mutation.ClearProductimgs()
	return puo
}

// RemoveProductimgIDs removes the "productimgs" edge to ProductImg entities by IDs.
func (puo *ProductUpdateOne) RemoveProductimgIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveProductimgIDs(ids...)
	return puo
}

// RemoveProductimgs removes "productimgs" edges to ProductImg entities.
func (puo *ProductUpdateOne) RemoveProductimgs(p ...*ProductImg) *ProductUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductimgIDs(ids...)
}

// ClearFavourite clears all "favourite" edges to the Favourite entity.
func (puo *ProductUpdateOne) ClearFavourite() *ProductUpdateOne {
	puo.mutation.ClearFavourite()
	return puo
}

// RemoveFavouriteIDs removes the "favourite" edge to Favourite entities by IDs.
func (puo *ProductUpdateOne) RemoveFavouriteIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveFavouriteIDs(ids...)
	return puo
}

// RemoveFavourite removes "favourite" edges to Favourite entities.
func (puo *ProductUpdateOne) RemoveFavourite(f ...*Favourite) *ProductUpdateOne {
	ids := make([]uint64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFavouriteIDs(ids...)
}

// ClearCart clears all "cart" edges to the Cart entity.
func (puo *ProductUpdateOne) ClearCart() *ProductUpdateOne {
	puo.mutation.ClearCart()
	return puo
}

// RemoveCartIDs removes the "cart" edge to Cart entities by IDs.
func (puo *ProductUpdateOne) RemoveCartIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveCartIDs(ids...)
	return puo
}

// RemoveCart removes "cart" edges to Cart entities.
func (puo *ProductUpdateOne) RemoveCart(c ...*Cart) *ProductUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCartIDs(ids...)
}

// ClearOrder clears all "order" edges to the Order entity.
func (puo *ProductUpdateOne) ClearOrder() *ProductUpdateOne {
	puo.mutation.ClearOrder()
	return puo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderIDs(ids ...uint64) *ProductUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrder removes "order" edges to Order entities.
func (puo *ProductUpdateOne) RemoveOrder(o ...*Order) *ProductUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Info(); ok {
		_spec.SetField(product.FieldInfo, field.TypeString, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.DiscountPrice(); ok {
		_spec.SetField(product.FieldDiscountPrice, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(product.FieldDiscountPrice, field.TypeInt64, value)
	}
	if puo.mutation.DiscountPriceCleared() {
		_spec.ClearField(product.FieldDiscountPrice, field.TypeInt64)
	}
	if puo.mutation.CarouselsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCarouselsIDs(); len(nodes) > 0 && !puo.mutation.CarouselsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CarouselsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CarouselsTable,
			Columns: []string{product.CarouselsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductimgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductimgsIDs(); len(nodes) > 0 && !puo.mutation.ProductimgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductimgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductimgsTable,
			Columns: []string{product.ProductimgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFavouriteIDs(); len(nodes) > 0 && !puo.mutation.FavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FavouriteTable,
			Columns: []string{product.FavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCartIDs(); len(nodes) > 0 && !puo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartTable,
			Columns: []string{product.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !puo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderTable,
			Columns: []string{product.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
