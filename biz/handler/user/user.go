// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/Tracy-coder/e-mall/biz/domain"
	logic "github.com/Tracy-coder/e-mall/biz/logic"
	"github.com/Tracy-coder/e-mall/biz/model/user"
	pb "github.com/Tracy-coder/e-mall/biz/model/user"
	"github.com/Tracy-coder/e-mall/data"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jinzhu/copier"
)

// Register .
// @router /api/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(user.BaseResp)
	var req pb.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = pb.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	valid := logic.CaptchaStore.Verify(req.CaptchaID, req.Captcha, true)
	if !valid {
		resp.ErrCode = pb.ErrCode_CaptchaMismatchError
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var userRegisterReq domain.UserRegisterReq
	_ = copier.Copy(&userRegisterReq, &req)

	err = logic.NewUser(data.Default()).Register(ctx, userRegisterReq)
	if err != nil {
		resp.ErrCode = pb.ErrCode_CreateUserError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = pb.ErrCode_Success
	resp.ErrMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// Captcha .
// @router /api/captcha [GET]
func Captcha(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.Empty
	resp := new(user.CaptchaInfoResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.ErrCode = pb.ErrCode_ArgumentError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	id, b64s, err := logic.NewCaptcha().GetCaptcha()
	if err != nil {
		resp.ErrCode = pb.ErrCode_CaptchaError
		resp.ErrMsg = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.ErrCode = pb.ErrCode_Success
	resp.ErrMsg = "success"
	resp.CaptchaID = id
	resp.ImgPath = b64s

	c.JSON(consts.StatusOK, resp)
}
