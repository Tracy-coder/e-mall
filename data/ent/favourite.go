// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tracy-coder/e-mall/data/ent/favourite"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// Favourite is the model entity for the Favourite schema.
type Favourite struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID uint64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// product ID | 产品编号
	ProductID uint64 `json:"productID,omitempty"`
	// user ID | 用户编号
	UserID uint64 `json:"userID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavouriteQuery when eager-loading is set.
	Edges        FavouriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FavouriteEdges holds the relations/edges for other nodes in the graph.
type FavouriteEdges struct {
	// ProductFavourite holds the value of the product_favourite edge.
	ProductFavourite *Product `json:"product_favourite,omitempty"`
	// UserFavourite holds the value of the user_favourite edge.
	UserFavourite *User `json:"user_favourite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductFavouriteOrErr returns the ProductFavourite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) ProductFavouriteOrErr() (*Product, error) {
	if e.ProductFavourite != nil {
		return e.ProductFavourite, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product_favourite"}
}

// UserFavouriteOrErr returns the UserFavourite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) UserFavouriteOrErr() (*User, error) {
	if e.UserFavourite != nil {
		return e.UserFavourite, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_favourite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favourite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID, favourite.FieldProductID, favourite.FieldUserID:
			values[i] = new(sql.NullInt64)
		case favourite.FieldCreatedAt, favourite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favourite fields.
func (f *Favourite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = uint64(value.Int64)
		case favourite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case favourite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case favourite.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field productID", values[i])
			} else if value.Valid {
				f.ProductID = uint64(value.Int64)
			}
		case favourite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userID", values[i])
			} else if value.Valid {
				f.UserID = uint64(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favourite.
// This includes values selected through modifiers, order, etc.
func (f *Favourite) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryProductFavourite queries the "product_favourite" edge of the Favourite entity.
func (f *Favourite) QueryProductFavourite() *ProductQuery {
	return NewFavouriteClient(f.config).QueryProductFavourite(f)
}

// QueryUserFavourite queries the "user_favourite" edge of the Favourite entity.
func (f *Favourite) QueryUserFavourite() *UserQuery {
	return NewFavouriteClient(f.config).QueryUserFavourite(f)
}

// Update returns a builder for updating this Favourite.
// Note that you need to call Favourite.Unwrap() before calling this method if this Favourite
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favourite) Update() *FavouriteUpdateOne {
	return NewFavouriteClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Favourite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favourite) Unwrap() *Favourite {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favourite is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favourite) String() string {
	var builder strings.Builder
	builder.WriteString("Favourite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("productID=")
	builder.WriteString(fmt.Sprintf("%v", f.ProductID))
	builder.WriteString(", ")
	builder.WriteString("userID=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Favourites is a parsable slice of Favourite.
type Favourites []*Favourite
