// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/productimg"
)

// ProductImgUpdate is the builder for updating ProductImg entities.
type ProductImgUpdate struct {
	config
	hooks    []Hook
	mutation *ProductImgMutation
}

// Where appends a list predicates to the ProductImgUpdate builder.
func (piu *ProductImgUpdate) Where(ps ...predicate.ProductImg) *ProductImgUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProductImgUpdate) SetUpdatedAt(t time.Time) *ProductImgUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetImgPath sets the "img_path" field.
func (piu *ProductImgUpdate) SetImgPath(s string) *ProductImgUpdate {
	piu.mutation.SetImgPath(s)
	return piu
}

// SetNillableImgPath sets the "img_path" field if the given value is not nil.
func (piu *ProductImgUpdate) SetNillableImgPath(s *string) *ProductImgUpdate {
	if s != nil {
		piu.SetImgPath(*s)
	}
	return piu
}

// SetProductID sets the "productID" field.
func (piu *ProductImgUpdate) SetProductID(u uint64) *ProductImgUpdate {
	piu.mutation.SetProductID(u)
	return piu
}

// SetNillableProductID sets the "productID" field if the given value is not nil.
func (piu *ProductImgUpdate) SetNillableProductID(u *uint64) *ProductImgUpdate {
	if u != nil {
		piu.SetProductID(*u)
	}
	return piu
}

// ClearProductID clears the value of the "productID" field.
func (piu *ProductImgUpdate) ClearProductID() *ProductImgUpdate {
	piu.mutation.ClearProductID()
	return piu
}

// SetProduct sets the "product" edge to the Product entity.
func (piu *ProductImgUpdate) SetProduct(p *Product) *ProductImgUpdate {
	return piu.SetProductID(p.ID)
}

// Mutation returns the ProductImgMutation object of the builder.
func (piu *ProductImgUpdate) Mutation() *ProductImgMutation {
	return piu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (piu *ProductImgUpdate) ClearProduct() *ProductImgUpdate {
	piu.mutation.ClearProduct()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductImgUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductImgUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductImgUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductImgUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProductImgUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := productimg.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

func (piu *ProductImgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productimg.Table, productimg.Columns, sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(productimg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.ImgPath(); ok {
		_spec.SetField(productimg.FieldImgPath, field.TypeString, value)
	}
	if piu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimg.ProductTable,
			Columns: []string{productimg.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimg.ProductTable,
			Columns: []string{productimg.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductImgUpdateOne is the builder for updating a single ProductImg entity.
type ProductImgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductImgMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProductImgUpdateOne) SetUpdatedAt(t time.Time) *ProductImgUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetImgPath sets the "img_path" field.
func (piuo *ProductImgUpdateOne) SetImgPath(s string) *ProductImgUpdateOne {
	piuo.mutation.SetImgPath(s)
	return piuo
}

// SetNillableImgPath sets the "img_path" field if the given value is not nil.
func (piuo *ProductImgUpdateOne) SetNillableImgPath(s *string) *ProductImgUpdateOne {
	if s != nil {
		piuo.SetImgPath(*s)
	}
	return piuo
}

// SetProductID sets the "productID" field.
func (piuo *ProductImgUpdateOne) SetProductID(u uint64) *ProductImgUpdateOne {
	piuo.mutation.SetProductID(u)
	return piuo
}

// SetNillableProductID sets the "productID" field if the given value is not nil.
func (piuo *ProductImgUpdateOne) SetNillableProductID(u *uint64) *ProductImgUpdateOne {
	if u != nil {
		piuo.SetProductID(*u)
	}
	return piuo
}

// ClearProductID clears the value of the "productID" field.
func (piuo *ProductImgUpdateOne) ClearProductID() *ProductImgUpdateOne {
	piuo.mutation.ClearProductID()
	return piuo
}

// SetProduct sets the "product" edge to the Product entity.
func (piuo *ProductImgUpdateOne) SetProduct(p *Product) *ProductImgUpdateOne {
	return piuo.SetProductID(p.ID)
}

// Mutation returns the ProductImgMutation object of the builder.
func (piuo *ProductImgUpdateOne) Mutation() *ProductImgMutation {
	return piuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (piuo *ProductImgUpdateOne) ClearProduct() *ProductImgUpdateOne {
	piuo.mutation.ClearProduct()
	return piuo
}

// Where appends a list predicates to the ProductImgUpdate builder.
func (piuo *ProductImgUpdateOne) Where(ps ...predicate.ProductImg) *ProductImgUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductImgUpdateOne) Select(field string, fields ...string) *ProductImgUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductImg entity.
func (piuo *ProductImgUpdateOne) Save(ctx context.Context) (*ProductImg, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductImgUpdateOne) SaveX(ctx context.Context) *ProductImg {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductImgUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductImgUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProductImgUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := productimg.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

func (piuo *ProductImgUpdateOne) sqlSave(ctx context.Context) (_node *ProductImg, err error) {
	_spec := sqlgraph.NewUpdateSpec(productimg.Table, productimg.Columns, sqlgraph.NewFieldSpec(productimg.FieldID, field.TypeUint64))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductImg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productimg.FieldID)
		for _, f := range fields {
			if !productimg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productimg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productimg.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.ImgPath(); ok {
		_spec.SetField(productimg.FieldImgPath, field.TypeString, value)
	}
	if piuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimg.ProductTable,
			Columns: []string{productimg.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productimg.ProductTable,
			Columns: []string{productimg.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductImg{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
