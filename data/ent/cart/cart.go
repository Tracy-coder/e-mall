// Code generated by ent, DO NOT EDIT.

package cart

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cart type in the database.
	Label = "cart"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// FieldProductID holds the string denoting the productid field in the database.
	FieldProductID = "product_id"
	// FieldNum holds the string denoting the num field in the database.
	FieldNum = "num"
	// FieldMaxNum holds the string denoting the maxnum field in the database.
	FieldMaxNum = "max_num"
	// FieldCheck holds the string denoting the check field in the database.
	FieldCheck = "check"
	// EdgeUserCart holds the string denoting the user_cart edge name in mutations.
	EdgeUserCart = "user_cart"
	// EdgeProductCart holds the string denoting the product_cart edge name in mutations.
	EdgeProductCart = "product_cart"
	// Table holds the table name of the cart in the database.
	Table = "carts"
	// UserCartTable is the table that holds the user_cart relation/edge.
	UserCartTable = "carts"
	// UserCartInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserCartInverseTable = "users"
	// UserCartColumn is the table column denoting the user_cart relation/edge.
	UserCartColumn = "user_id"
	// ProductCartTable is the table that holds the product_cart relation/edge.
	ProductCartTable = "carts"
	// ProductCartInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductCartInverseTable = "products"
	// ProductCartColumn is the table column denoting the product_cart relation/edge.
	ProductCartColumn = "product_id"
)

// Columns holds all SQL columns for cart fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldProductID,
	FieldNum,
	FieldMaxNum,
	FieldCheck,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Cart queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the UserID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByProductID orders the results by the ProductID field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByNum orders the results by the Num field.
func ByNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNum, opts...).ToFunc()
}

// ByMaxNum orders the results by the MaxNum field.
func ByMaxNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxNum, opts...).ToFunc()
}

// ByCheck orders the results by the Check field.
func ByCheck(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheck, opts...).ToFunc()
}

// ByUserCartField orders the results by user_cart field.
func ByUserCartField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCartStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductCartField orders the results by product_cart field.
func ByProductCartField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductCartStep(), sql.OrderByField(field, opts...))
	}
}
func newUserCartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCartInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserCartTable, UserCartColumn),
	)
}
func newProductCartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductCartInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductCartTable, ProductCartColumn),
	)
}
