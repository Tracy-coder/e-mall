// Code generated by ent, DO NOT EDIT.

package cart

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "UserID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUserID, v))
}

// ProductID applies equality check predicate on the "ProductID" field. It's identical to ProductIDEQ.
func ProductID(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldProductID, v))
}

// Num applies equality check predicate on the "Num" field. It's identical to NumEQ.
func Num(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldNum, v))
}

// MaxNum applies equality check predicate on the "MaxNum" field. It's identical to MaxNumEQ.
func MaxNum(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldMaxNum, v))
}

// Check applies equality check predicate on the "Check" field. It's identical to CheckEQ.
func Check(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCheck, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "UserID" field.
func UserIDEQ(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "UserID" field.
func UserIDNEQ(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "UserID" field.
func UserIDIn(vs ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "UserID" field.
func UserIDNotIn(vs ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "UserID" field.
func UserIDIsNil() predicate.Cart {
	return predicate.Cart(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "UserID" field.
func UserIDNotNil() predicate.Cart {
	return predicate.Cart(sql.FieldNotNull(FieldUserID))
}

// ProductIDEQ applies the EQ predicate on the "ProductID" field.
func ProductIDEQ(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "ProductID" field.
func ProductIDNEQ(v uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "ProductID" field.
func ProductIDIn(vs ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "ProductID" field.
func ProductIDNotIn(vs ...uint64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "ProductID" field.
func ProductIDIsNil() predicate.Cart {
	return predicate.Cart(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "ProductID" field.
func ProductIDNotNil() predicate.Cart {
	return predicate.Cart(sql.FieldNotNull(FieldProductID))
}

// NumEQ applies the EQ predicate on the "Num" field.
func NumEQ(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "Num" field.
func NumNEQ(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "Num" field.
func NumIn(vs ...int32) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "Num" field.
func NumNotIn(vs ...int32) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "Num" field.
func NumGT(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "Num" field.
func NumGTE(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "Num" field.
func NumLT(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "Num" field.
func NumLTE(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldNum, v))
}

// MaxNumEQ applies the EQ predicate on the "MaxNum" field.
func MaxNumEQ(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldMaxNum, v))
}

// MaxNumNEQ applies the NEQ predicate on the "MaxNum" field.
func MaxNumNEQ(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldMaxNum, v))
}

// MaxNumIn applies the In predicate on the "MaxNum" field.
func MaxNumIn(vs ...int32) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldMaxNum, vs...))
}

// MaxNumNotIn applies the NotIn predicate on the "MaxNum" field.
func MaxNumNotIn(vs ...int32) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldMaxNum, vs...))
}

// MaxNumGT applies the GT predicate on the "MaxNum" field.
func MaxNumGT(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldMaxNum, v))
}

// MaxNumGTE applies the GTE predicate on the "MaxNum" field.
func MaxNumGTE(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldMaxNum, v))
}

// MaxNumLT applies the LT predicate on the "MaxNum" field.
func MaxNumLT(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldMaxNum, v))
}

// MaxNumLTE applies the LTE predicate on the "MaxNum" field.
func MaxNumLTE(v int32) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldMaxNum, v))
}

// CheckEQ applies the EQ predicate on the "Check" field.
func CheckEQ(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCheck, v))
}

// CheckNEQ applies the NEQ predicate on the "Check" field.
func CheckNEQ(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldCheck, v))
}

// HasUserCart applies the HasEdge predicate on the "user_cart" edge.
func HasUserCart() predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserCartTable, UserCartColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCartWith applies the HasEdge predicate on the "user_cart" edge with a given conditions (other predicates).
func HasUserCartWith(preds ...predicate.User) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := newUserCartStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductCart applies the HasEdge predicate on the "product_cart" edge.
func HasProductCart() predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductCartTable, ProductCartColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductCartWith applies the HasEdge predicate on the "product_cart" edge with a given conditions (other predicates).
func HasProductCartWith(preds ...predicate.Product) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := newProductCartStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.NotPredicates(p))
}
