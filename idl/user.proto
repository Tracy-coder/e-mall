syntax = "proto3";

package user;
import "api.proto";
import "base.proto";

message UserRegisterReq{
    string nickname = 1;
	  string username = 2;
	  string password = 3;
    string captchaID = 4;
    string captcha = 5;
    string email = 6;
}

message UserLoginReq{
  string username = 1;
  string password = 3;
  string captchaID = 4;
  string captcha = 5;
}

message UserLoginResp {
  string code = 1;
  string token = 2;
  string expire = 3;
}





message Empty {}

message CaptchaInfoResp {
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string captchaID = 3;
  string imgPath = 4;
}

message UserInfoResp {
  base.ErrCode errCode = 1;
  string errMsg = 2;
  uint64 ID = 3;
  string avatar = 4;
  string mobile = 6;
  string email = 7;
  uint64 status = 8;
  string username = 9;
  string nickname = 10;
  string createdAt = 12;
  string updatedAt = 13;
}
message GTLoginResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string loginURL = 3;
}

message GTLoginCallbackReq{
  string code = 1;
}

enum EmailOperation {
  Binding = 0;
  Unbinding = 1;
}

message ValidEmailReq{
 EmailOperation op = 1;
 string email = 2;
}

message ValidEmailResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string email = 3;
  string username = 4;
}

message VerifyEmailReq{
  uint64 email_id  = 1;
  string secret_code = 2;
}

message UploadAvatarReq{
  string filename = 1;
}
message UploadAvatarResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  string put = 3;
  string get = 4;
}

message CreateFavouriteReq{
  uint64 ProductID = 1;
}


service user{
  rpc Register(UserRegisterReq) returns (base.BaseResp) {
    option (api.post) = "/api/v1/register";
  }
  rpc Captcha(Empty) returns (CaptchaInfoResp){
    option (api.get) = "/api/v1/captcha";
  }
  // rpc Login(UserLoginReq) returns (UserLoginResp){
  //   option (api.post) = "/api/login";
  // }

  //返回的是自己的info
  rpc UserInfo(Empty) returns (UserInfoResp){
    option (api.get) = "/api/v1/user/info";
  }

  rpc GTLogin(Empty) returns (GTLoginResp){
    option (api.get) = "/api/v1/github/login";
  }
  rpc GTLoginCallback(GTLoginCallbackReq) returns (base.BaseResp){
    option (api.get) = "/api/v1/github/login/callback";
  }
  rpc ValidEmail(ValidEmailReq) returns (ValidEmailResp){
    option (api.post) = "/api/v1/user/valid_email";
  }

  rpc VerifyEmail(VerifyEmailReq) returns(base.BaseResp){
    option (api.get) = "/api/v1/verify_email";
  }

  rpc UploadAvatar(UploadAvatarReq)returns(UploadAvatarResp){
    option (api.post) = "/api/v1/user/upload_avatar";
  }


}

message CreateProductReq {
	string Name = 1;
	uint64 CategoryID = 2;
	string Title = 3;
	string Info = 4;
	string ImgPath = 5;
  int64 Price = 6;
	int64 DiscountPrice = 7;
}

message ProductInfo{
	string Name = 1;
	uint64 CategoryID = 2;
	string Title = 3;
	string Info = 4;
	string ImgPath = 5;
	int64 DiscountPrice = 6;
  uint64 View = 7;
  uint64 CreatedAt = 8;
}
message CreateProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    ProductInfo product = 3; 

}

message ShowProductReq{
  uint64 id= 1;
}

message ShowProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    ProductInfo product = 3; 
}

message ListProductReq{
	int32 Limit = 1;
	int32 Start = 2;
	uint64 CategoryID = 3;
}

message ListProductResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    repeated ProductInfo product = 3; 
}

message UpdateProductReq{
  uint64 ID = 1;
	string Name = 2;
	uint64 CategoryID = 3;
	string Title = 4;
	string Info = 5;
	string ImgPath = 6;
  int64 Price = 7;
	int64 DiscountPrice = 8;
}

message DeleteProductReq{
  uint64 id = 1;
}

message ShowProductImgReq{
  uint64 id = 1;
}

message ProductImg{
  uint64 ID = 1;
  uint64 ProductID = 2;
  string ImgPath = 3;
  uint64 CreatedAt = 4;
}
message ShowProductImgResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
  repeated ProductImg info = 3;
}

message CreateProductImgReq{
  uint64 ProductID = 1;
  string ImgPath = 2;
}

message CreateProductImgResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
  ProductImg info = 3;
}

message ShowProductRankingsResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    repeated ProductInfo info = 3;
}
service product{
    rpc CreateProduct(CreateProductReq)returns(CreateProductResp){
      option (api.post) = "/api/v2/products";
    }

    rpc ShowProduct(ShowProductReq)returns(ShowProductResp){
      option (api.get) = "/api/v1/product";
    }

    rpc ListProduct(ListProductReq)returns(ListProductResp){
      option (api.get) = "/api/v1/products";
    }
    rpc UpdateProduct(UpdateProductReq)returns(base.BaseResp){
      option (api.put) = "/api/v2/product";
    }
    rpc DeleteProduct(DeleteProductReq)returns(base.BaseResp){
      option (api.delete) = "/api/v2/product";
    }
    rpc ShowProductImg(ShowProductImgReq)returns(ShowProductImgResp){
      option (api.get) = "/api/v1/product/img";
    }
    rpc CreateProductImg(CreateProductImgReq)returns(CreateProductImgResp){
      option (api.post) = "/api/v2/product/img";
    }
    rpc ShowProductRankings(Empty)returns(ShowProductRankingsResp){
      option (api.get) = "/api/v1/product/rankings";
    }
}

message CreateCategoryReq{
  uint64 ID = 1;
  string CategoryName = 2;
}

message CategoryInfo{
  uint64 ID = 1;
  string CategoryName = 2;
  uint64 CreatedAt = 3;
}

message ListCategoryResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    repeated CategoryInfo categories= 3;
}
service category{
  rpc CreateCategory(CreateCategoryReq) returns(base.BaseResp){
    option (api.post) = "/api/v2/categories";
  }
  rpc ListCategory(Empty)returns(ListCategoryResp){
    option (api.get) = "/api/v1/categories";
  }
}

message CarouselInfo{
	uint64 ID = 1; 
	string ImgPath = 2;
	uint64  ProductID = 3;
	uint64 CreatedAt = 4;
}

message ListCarouselResp{
    base.ErrCode errCode = 1;
    string errMsg = 2;
    repeated CarouselInfo carousels = 3;
}

message CreateCarouselReq{
  uint64 ProductID = 1;
  string ImgPath = 2;
}
service carousel{
  rpc CreateCarousel(CreateCarouselReq)returns(base.BaseResp){
    option (api.post) = "/api/v2/carousels";
  }
  rpc ListCarousels(Empty)returns(ListCarouselResp){
    option (api.get) = "/api/v1/carousels";
  }
}

message ShowNoticesReq{
  int32 pageID = 1;
  int32 pageSize = 2;
}

message NoticeInfo{
  uint64 ID = 1;
  string Text = 2;
  uint64 CreatedAt = 3;
}
message ShowNoticesResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  repeated NoticeInfo notices  = 3;
  int32 total = 4;
}

message CreateNoticeReq{

  string text = 1;
}
message CreateNoticeResp{
      base.ErrCode errCode = 1;
  string errMsg = 2;
  NoticeInfo notice = 3;
}
service notice{
  rpc ShowNotices(ShowNoticesReq)returns(ShowNoticesResp){
    option (api.get) = "/api/v1/notices";
  }

  rpc CreateNotice(CreateNoticeReq)returns(CreateNoticeResp){
    option (api.post) = "/api/v2/notices";
  }
}

message Favourite{
  uint64 ID = 1;
  uint64 ProductID = 2;
  uint64 UserID = 3;
  uint64 CreatedAt = 4; 
}
message CreateFavouriteResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  Favourite favourite = 3;
}

message ShowFavouritesReq{
  int32 page_id = 1;
  int32 page_size = 2; 
}

message ShowFavouriteResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  repeated Favourite favourites = 3;
  int32 Total = 4;
}

message DeleteFavouriteReq{
  uint64 ProductID = 1;
}

service favourite{
    rpc CreateFavourite(CreateFavouriteReq)returns(CreateFavouriteResp){
    option (api.post) = "/api/v1/user/favourites";
  }
  rpc ShowFavourites(ShowFavouritesReq)returns(ShowFavouriteResp){
    option (api.get) = "/api/v1/user/favourites";
  }
  rpc DeleteFavourite(DeleteFavouriteReq)returns(base.BaseResp){
    option (api.delete) = "/api/v1/user/favourites";
  }
}

message CreateAddressReq{
  string name = 1;
  string phone = 2;
  string address = 3;
}

message AddressInfo{
  uint64 ID = 1;
  string Name = 2;
  string Phone = 3;
  string Address = 4;
  uint64 CreatedAt = 5;
}

message CreateAddressResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  AddressInfo info = 3;
}

message ShowAddressResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  repeated AddressInfo info = 3;
}

message UpdateAddressReq{
  uint64 id = 1;
  string name = 2;
  string phone = 3;
  string address = 4;
}

message UpdateAddressResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  AddressInfo info = 3;
}

message DeleteAddressReq{
  uint64 id = 1;
}


service address{
  rpc CreateAddress(CreateAddressReq)returns(CreateAddressResp){
    option (api.post) = "/api/v1/user/addresses";
  }
  rpc ShowAddress(Empty)returns(ShowAddressResp){
    option (api.get) = "/api/v1/user/addresses";
  }
  rpc UpdateAddress(UpdateAddressReq)returns(base.BaseResp){
    option (api.put) = "/api/v1/user/addresses";
  }
  rpc DeleteAddress(DeleteAddressReq)returns(base.BaseResp){
    option (api.delete) = "/api/v1/user/addresses";
  }
}

message CartInfo{
  uint64 ID = 1;
  uint64 UserID = 2;
  uint64 ProductID = 3;
  int32 Num = 4;
  int32 MaxNum = 5;
  bool Check = 6;
  uint64 CreatedAt = 7;
}

message CreateCartReq{
  uint64 productID = 1;
}

message CreateCartResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  CartInfo info = 3;
}

message ShowCartResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  repeated CartInfo info = 3;
}

message UpdateCartReq{
  uint64 productID = 1;
  int32 num = 2;
}

message DeleteCartReq{
  uint64 productID = 1;
}

service cart{
  rpc CreateCart(CreateCartReq)returns(CreateCartResp){
    option (api.post) = "/api/v1/user/carts";
  }
  rpc ShowCart(Empty)returns(ShowCartResp){
    option (api.get) = "/api/v1/user/carts";
  }
  rpc UpdateCart(UpdateCartReq)returns(base.BaseResp){
    option (api.put) = "/api/v1/user/carts";
  }
  rpc DeleteCart(DeleteCartReq)returns(base.BaseResp){
    option (api.delete) = "/api/v1/user/carts";
  }
}

message CreateOrderReq{
  uint64 productID = 1;
  int32 num = 2;
  uint64 addressID = 3;
}

message ListOrderReq{
   int32 pageID = 1;
  int32 pageSize = 2;
  uint64 type = 3; 
}

message OrderInfo{
  	uint64	ID = 1;
		int32 OrderNum = 2;
		uint64 CreatedAt = 3;
		uint64 UpdatedAt = 4;
		uint64 UserID = 5;
		uint64 ProductID = 6;
		int32  Num = 7;
		string AddressName = 8;
		string AddressPhone = 9;
		string Address = 10;
		uint64 Type = 11;
    string Name = 12;
    string ImgPath = 13;
		int64 Price = 14;
}

message ListOrderResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  repeated OrderInfo info = 3;
  int32 total = 4;
}

message ShowOrderReq{
  uint64 orderNum = 1;
}

message ShowOrderResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
  OrderInfo info = 3;
}


message ShowCountResp{
  base.ErrCode errCode = 1;
  string errMsg = 2;
	int32 favoriteTotal = 3;
	int32 notPayTotal  = 4;
	int32 payTotal = 5;
}
service order{
  rpc CreateOrder(CreateOrderReq)returns(base.BaseResp){
    option (api.post) = "/api/v1/user/orders";
  }
  rpc ListOrder(ListOrderReq)returns(ListOrderResp){
    option (api.get) = "/api/v1/user/orders";
  }
  rpc ShowOrder(ShowOrderReq)returns(ShowOrderResp){
    option (api.get) = "/api/v1/user/order";
  }
  rpc ShowCount(Empty)returns(ShowCountResp){
    option (api.get) = "/api/v1/user/count";
  }
}

message InitPayReq{
  uint64 orderNum = 1;
}




service payment{
  rpc InitPay(InitPayReq)returns(Empty){
    option (api.get) = "/api/v1/user/payments";
  }
  rpc NotifyPay(Empty)returns(base.BaseResp){
    option (api.post) = "/api/v1/alipay/notify";
  }
  rpc CallbackPay(Empty)returns(base.BaseResp){
    option (api.get) = "/api/v1/alipay/callback";
  }
}