// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/favourite"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// FavouriteUpdate is the builder for updating Favourite entities.
type FavouriteUpdate struct {
	config
	hooks    []Hook
	mutation *FavouriteMutation
}

// Where appends a list predicates to the FavouriteUpdate builder.
func (fu *FavouriteUpdate) Where(ps ...predicate.Favourite) *FavouriteUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FavouriteUpdate) SetUpdatedAt(t time.Time) *FavouriteUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetProductID sets the "productID" field.
func (fu *FavouriteUpdate) SetProductID(u uint64) *FavouriteUpdate {
	fu.mutation.SetProductID(u)
	return fu
}

// SetNillableProductID sets the "productID" field if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableProductID(u *uint64) *FavouriteUpdate {
	if u != nil {
		fu.SetProductID(*u)
	}
	return fu
}

// ClearProductID clears the value of the "productID" field.
func (fu *FavouriteUpdate) ClearProductID() *FavouriteUpdate {
	fu.mutation.ClearProductID()
	return fu
}

// SetUserID sets the "userID" field.
func (fu *FavouriteUpdate) SetUserID(u uint64) *FavouriteUpdate {
	fu.mutation.SetUserID(u)
	return fu
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableUserID(u *uint64) *FavouriteUpdate {
	if u != nil {
		fu.SetUserID(*u)
	}
	return fu
}

// ClearUserID clears the value of the "userID" field.
func (fu *FavouriteUpdate) ClearUserID() *FavouriteUpdate {
	fu.mutation.ClearUserID()
	return fu
}

// SetProductFavouriteID sets the "product_favourite" edge to the Product entity by ID.
func (fu *FavouriteUpdate) SetProductFavouriteID(id uint64) *FavouriteUpdate {
	fu.mutation.SetProductFavouriteID(id)
	return fu
}

// SetNillableProductFavouriteID sets the "product_favourite" edge to the Product entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableProductFavouriteID(id *uint64) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetProductFavouriteID(*id)
	}
	return fu
}

// SetProductFavourite sets the "product_favourite" edge to the Product entity.
func (fu *FavouriteUpdate) SetProductFavourite(p *Product) *FavouriteUpdate {
	return fu.SetProductFavouriteID(p.ID)
}

// SetUserFavouriteID sets the "user_favourite" edge to the User entity by ID.
func (fu *FavouriteUpdate) SetUserFavouriteID(id uint64) *FavouriteUpdate {
	fu.mutation.SetUserFavouriteID(id)
	return fu
}

// SetNillableUserFavouriteID sets the "user_favourite" edge to the User entity by ID if the given value is not nil.
func (fu *FavouriteUpdate) SetNillableUserFavouriteID(id *uint64) *FavouriteUpdate {
	if id != nil {
		fu = fu.SetUserFavouriteID(*id)
	}
	return fu
}

// SetUserFavourite sets the "user_favourite" edge to the User entity.
func (fu *FavouriteUpdate) SetUserFavourite(u *User) *FavouriteUpdate {
	return fu.SetUserFavouriteID(u.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fu *FavouriteUpdate) Mutation() *FavouriteMutation {
	return fu.mutation
}

// ClearProductFavourite clears the "product_favourite" edge to the Product entity.
func (fu *FavouriteUpdate) ClearProductFavourite() *FavouriteUpdate {
	fu.mutation.ClearProductFavourite()
	return fu
}

// ClearUserFavourite clears the "user_favourite" edge to the User entity.
func (fu *FavouriteUpdate) ClearUserFavourite() *FavouriteUpdate {
	fu.mutation.ClearUserFavourite()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FavouriteUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FavouriteUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FavouriteUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FavouriteUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FavouriteUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := favourite.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FavouriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(favourite.Table, favourite.Columns, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.ProductFavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductFavouriteTable,
			Columns: []string{favourite.ProductFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProductFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductFavouriteTable,
			Columns: []string{favourite.ProductFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserFavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.UserFavouriteTable,
			Columns: []string{favourite.UserFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.UserFavouriteTable,
			Columns: []string{favourite.UserFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FavouriteUpdateOne is the builder for updating a single Favourite entity.
type FavouriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavouriteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FavouriteUpdateOne) SetUpdatedAt(t time.Time) *FavouriteUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetProductID sets the "productID" field.
func (fuo *FavouriteUpdateOne) SetProductID(u uint64) *FavouriteUpdateOne {
	fuo.mutation.SetProductID(u)
	return fuo
}

// SetNillableProductID sets the "productID" field if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableProductID(u *uint64) *FavouriteUpdateOne {
	if u != nil {
		fuo.SetProductID(*u)
	}
	return fuo
}

// ClearProductID clears the value of the "productID" field.
func (fuo *FavouriteUpdateOne) ClearProductID() *FavouriteUpdateOne {
	fuo.mutation.ClearProductID()
	return fuo
}

// SetUserID sets the "userID" field.
func (fuo *FavouriteUpdateOne) SetUserID(u uint64) *FavouriteUpdateOne {
	fuo.mutation.SetUserID(u)
	return fuo
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableUserID(u *uint64) *FavouriteUpdateOne {
	if u != nil {
		fuo.SetUserID(*u)
	}
	return fuo
}

// ClearUserID clears the value of the "userID" field.
func (fuo *FavouriteUpdateOne) ClearUserID() *FavouriteUpdateOne {
	fuo.mutation.ClearUserID()
	return fuo
}

// SetProductFavouriteID sets the "product_favourite" edge to the Product entity by ID.
func (fuo *FavouriteUpdateOne) SetProductFavouriteID(id uint64) *FavouriteUpdateOne {
	fuo.mutation.SetProductFavouriteID(id)
	return fuo
}

// SetNillableProductFavouriteID sets the "product_favourite" edge to the Product entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableProductFavouriteID(id *uint64) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetProductFavouriteID(*id)
	}
	return fuo
}

// SetProductFavourite sets the "product_favourite" edge to the Product entity.
func (fuo *FavouriteUpdateOne) SetProductFavourite(p *Product) *FavouriteUpdateOne {
	return fuo.SetProductFavouriteID(p.ID)
}

// SetUserFavouriteID sets the "user_favourite" edge to the User entity by ID.
func (fuo *FavouriteUpdateOne) SetUserFavouriteID(id uint64) *FavouriteUpdateOne {
	fuo.mutation.SetUserFavouriteID(id)
	return fuo
}

// SetNillableUserFavouriteID sets the "user_favourite" edge to the User entity by ID if the given value is not nil.
func (fuo *FavouriteUpdateOne) SetNillableUserFavouriteID(id *uint64) *FavouriteUpdateOne {
	if id != nil {
		fuo = fuo.SetUserFavouriteID(*id)
	}
	return fuo
}

// SetUserFavourite sets the "user_favourite" edge to the User entity.
func (fuo *FavouriteUpdateOne) SetUserFavourite(u *User) *FavouriteUpdateOne {
	return fuo.SetUserFavouriteID(u.ID)
}

// Mutation returns the FavouriteMutation object of the builder.
func (fuo *FavouriteUpdateOne) Mutation() *FavouriteMutation {
	return fuo.mutation
}

// ClearProductFavourite clears the "product_favourite" edge to the Product entity.
func (fuo *FavouriteUpdateOne) ClearProductFavourite() *FavouriteUpdateOne {
	fuo.mutation.ClearProductFavourite()
	return fuo
}

// ClearUserFavourite clears the "user_favourite" edge to the User entity.
func (fuo *FavouriteUpdateOne) ClearUserFavourite() *FavouriteUpdateOne {
	fuo.mutation.ClearUserFavourite()
	return fuo
}

// Where appends a list predicates to the FavouriteUpdate builder.
func (fuo *FavouriteUpdateOne) Where(ps ...predicate.Favourite) *FavouriteUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FavouriteUpdateOne) Select(field string, fields ...string) *FavouriteUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Favourite entity.
func (fuo *FavouriteUpdateOne) Save(ctx context.Context) (*Favourite, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) SaveX(ctx context.Context) *Favourite {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FavouriteUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FavouriteUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FavouriteUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := favourite.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FavouriteUpdateOne) sqlSave(ctx context.Context) (_node *Favourite, err error) {
	_spec := sqlgraph.NewUpdateSpec(favourite.Table, favourite.Columns, sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUint64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Favourite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favourite.FieldID)
		for _, f := range fields {
			if !favourite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favourite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(favourite.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.ProductFavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductFavouriteTable,
			Columns: []string{favourite.ProductFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProductFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.ProductFavouriteTable,
			Columns: []string{favourite.ProductFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserFavouriteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.UserFavouriteTable,
			Columns: []string{favourite.UserFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserFavouriteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   favourite.UserFavouriteTable,
			Columns: []string{favourite.UserFavouriteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Favourite{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favourite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
