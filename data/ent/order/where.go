// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "UserID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// ProductID applies equality check predicate on the "ProductID" field. It's identical to ProductIDEQ.
func ProductID(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductID, v))
}

// Num applies equality check predicate on the "Num" field. It's identical to NumEQ.
func Num(v int32) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// OrderNum applies equality check predicate on the "OrderNum" field. It's identical to OrderNumEQ.
func OrderNum(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNum, v))
}

// AddressName applies equality check predicate on the "AddressName" field. It's identical to AddressNameEQ.
func AddressName(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressName, v))
}

// AddressPhone applies equality check predicate on the "AddressPhone" field. It's identical to AddressPhoneEQ.
func AddressPhone(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressPhone, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddress, v))
}

// Type applies equality check predicate on the "Type" field. It's identical to TypeEQ.
func Type(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldType, v))
}

// Price applies equality check predicate on the "Price" field. It's identical to PriceEQ.
func Price(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "UserID" field.
func UserIDEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "UserID" field.
func UserIDNEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "UserID" field.
func UserIDIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "UserID" field.
func UserIDNotIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "UserID" field.
func UserIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "UserID" field.
func UserIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldUserID))
}

// ProductIDEQ applies the EQ predicate on the "ProductID" field.
func ProductIDEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "ProductID" field.
func ProductIDNEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "ProductID" field.
func ProductIDIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "ProductID" field.
func ProductIDNotIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "ProductID" field.
func ProductIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "ProductID" field.
func ProductIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldProductID))
}

// NumEQ applies the EQ predicate on the "Num" field.
func NumEQ(v int32) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "Num" field.
func NumNEQ(v int32) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "Num" field.
func NumIn(vs ...int32) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "Num" field.
func NumNotIn(vs ...int32) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "Num" field.
func NumGT(v int32) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "Num" field.
func NumGTE(v int32) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "Num" field.
func NumLT(v int32) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "Num" field.
func NumLTE(v int32) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNum, v))
}

// OrderNumEQ applies the EQ predicate on the "OrderNum" field.
func OrderNumEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNum, v))
}

// OrderNumNEQ applies the NEQ predicate on the "OrderNum" field.
func OrderNumNEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderNum, v))
}

// OrderNumIn applies the In predicate on the "OrderNum" field.
func OrderNumIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderNum, vs...))
}

// OrderNumNotIn applies the NotIn predicate on the "OrderNum" field.
func OrderNumNotIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderNum, vs...))
}

// OrderNumGT applies the GT predicate on the "OrderNum" field.
func OrderNumGT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderNum, v))
}

// OrderNumGTE applies the GTE predicate on the "OrderNum" field.
func OrderNumGTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderNum, v))
}

// OrderNumLT applies the LT predicate on the "OrderNum" field.
func OrderNumLT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderNum, v))
}

// OrderNumLTE applies the LTE predicate on the "OrderNum" field.
func OrderNumLTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderNum, v))
}

// AddressNameEQ applies the EQ predicate on the "AddressName" field.
func AddressNameEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressName, v))
}

// AddressNameNEQ applies the NEQ predicate on the "AddressName" field.
func AddressNameNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldAddressName, v))
}

// AddressNameIn applies the In predicate on the "AddressName" field.
func AddressNameIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldAddressName, vs...))
}

// AddressNameNotIn applies the NotIn predicate on the "AddressName" field.
func AddressNameNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldAddressName, vs...))
}

// AddressNameGT applies the GT predicate on the "AddressName" field.
func AddressNameGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldAddressName, v))
}

// AddressNameGTE applies the GTE predicate on the "AddressName" field.
func AddressNameGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldAddressName, v))
}

// AddressNameLT applies the LT predicate on the "AddressName" field.
func AddressNameLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldAddressName, v))
}

// AddressNameLTE applies the LTE predicate on the "AddressName" field.
func AddressNameLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldAddressName, v))
}

// AddressNameContains applies the Contains predicate on the "AddressName" field.
func AddressNameContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldAddressName, v))
}

// AddressNameHasPrefix applies the HasPrefix predicate on the "AddressName" field.
func AddressNameHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldAddressName, v))
}

// AddressNameHasSuffix applies the HasSuffix predicate on the "AddressName" field.
func AddressNameHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldAddressName, v))
}

// AddressNameEqualFold applies the EqualFold predicate on the "AddressName" field.
func AddressNameEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldAddressName, v))
}

// AddressNameContainsFold applies the ContainsFold predicate on the "AddressName" field.
func AddressNameContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldAddressName, v))
}

// AddressPhoneEQ applies the EQ predicate on the "AddressPhone" field.
func AddressPhoneEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressPhone, v))
}

// AddressPhoneNEQ applies the NEQ predicate on the "AddressPhone" field.
func AddressPhoneNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldAddressPhone, v))
}

// AddressPhoneIn applies the In predicate on the "AddressPhone" field.
func AddressPhoneIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldAddressPhone, vs...))
}

// AddressPhoneNotIn applies the NotIn predicate on the "AddressPhone" field.
func AddressPhoneNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldAddressPhone, vs...))
}

// AddressPhoneGT applies the GT predicate on the "AddressPhone" field.
func AddressPhoneGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldAddressPhone, v))
}

// AddressPhoneGTE applies the GTE predicate on the "AddressPhone" field.
func AddressPhoneGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldAddressPhone, v))
}

// AddressPhoneLT applies the LT predicate on the "AddressPhone" field.
func AddressPhoneLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldAddressPhone, v))
}

// AddressPhoneLTE applies the LTE predicate on the "AddressPhone" field.
func AddressPhoneLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldAddressPhone, v))
}

// AddressPhoneContains applies the Contains predicate on the "AddressPhone" field.
func AddressPhoneContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldAddressPhone, v))
}

// AddressPhoneHasPrefix applies the HasPrefix predicate on the "AddressPhone" field.
func AddressPhoneHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldAddressPhone, v))
}

// AddressPhoneHasSuffix applies the HasSuffix predicate on the "AddressPhone" field.
func AddressPhoneHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldAddressPhone, v))
}

// AddressPhoneEqualFold applies the EqualFold predicate on the "AddressPhone" field.
func AddressPhoneEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldAddressPhone, v))
}

// AddressPhoneContainsFold applies the ContainsFold predicate on the "AddressPhone" field.
func AddressPhoneContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldAddressPhone, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldAddress, v))
}

// TypeEQ applies the EQ predicate on the "Type" field.
func TypeEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "Type" field.
func TypeNEQ(v uint64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "Type" field.
func TypeIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "Type" field.
func TypeNotIn(vs ...uint64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "Type" field.
func TypeGT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "Type" field.
func TypeGTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "Type" field.
func TypeLT(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "Type" field.
func TypeLTE(v uint64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldType, v))
}

// PriceEQ applies the EQ predicate on the "Price" field.
func PriceEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "Price" field.
func PriceNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "Price" field.
func PriceIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "Price" field.
func PriceNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "Price" field.
func PriceGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "Price" field.
func PriceGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "Price" field.
func PriceLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "Price" field.
func PriceLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPrice, v))
}

// HasUserOrder applies the HasEdge predicate on the "user_order" edge.
func HasUserOrder() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserOrderTable, UserOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOrderWith applies the HasEdge predicate on the "user_order" edge with a given conditions (other predicates).
func HasUserOrderWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newUserOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductOrder applies the HasEdge predicate on the "product_order" edge.
func HasProductOrder() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductOrderTable, ProductOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductOrderWith applies the HasEdge predicate on the "product_order" edge with a given conditions (other predicates).
func HasProductOrderWith(preds ...predicate.Product) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newProductOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
