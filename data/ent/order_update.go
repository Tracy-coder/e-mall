// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/order"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetUserID sets the "UserID" field.
func (ou *OrderUpdate) SetUserID(u uint64) *OrderUpdate {
	ou.mutation.SetUserID(u)
	return ou
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetUserID(*u)
	}
	return ou
}

// ClearUserID clears the value of the "UserID" field.
func (ou *OrderUpdate) ClearUserID() *OrderUpdate {
	ou.mutation.ClearUserID()
	return ou
}

// SetProductID sets the "ProductID" field.
func (ou *OrderUpdate) SetProductID(u uint64) *OrderUpdate {
	ou.mutation.SetProductID(u)
	return ou
}

// SetNillableProductID sets the "ProductID" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableProductID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetProductID(*u)
	}
	return ou
}

// ClearProductID clears the value of the "ProductID" field.
func (ou *OrderUpdate) ClearProductID() *OrderUpdate {
	ou.mutation.ClearProductID()
	return ou
}

// SetNum sets the "Num" field.
func (ou *OrderUpdate) SetNum(i int32) *OrderUpdate {
	ou.mutation.ResetNum()
	ou.mutation.SetNum(i)
	return ou
}

// SetNillableNum sets the "Num" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNum(i *int32) *OrderUpdate {
	if i != nil {
		ou.SetNum(*i)
	}
	return ou
}

// AddNum adds i to the "Num" field.
func (ou *OrderUpdate) AddNum(i int32) *OrderUpdate {
	ou.mutation.AddNum(i)
	return ou
}

// SetOrderNum sets the "OrderNum" field.
func (ou *OrderUpdate) SetOrderNum(u uint64) *OrderUpdate {
	ou.mutation.ResetOrderNum()
	ou.mutation.SetOrderNum(u)
	return ou
}

// SetNillableOrderNum sets the "OrderNum" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderNum(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetOrderNum(*u)
	}
	return ou
}

// AddOrderNum adds u to the "OrderNum" field.
func (ou *OrderUpdate) AddOrderNum(u int64) *OrderUpdate {
	ou.mutation.AddOrderNum(u)
	return ou
}

// SetAddressName sets the "AddressName" field.
func (ou *OrderUpdate) SetAddressName(s string) *OrderUpdate {
	ou.mutation.SetAddressName(s)
	return ou
}

// SetNillableAddressName sets the "AddressName" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressName(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAddressName(*s)
	}
	return ou
}

// SetAddressPhone sets the "AddressPhone" field.
func (ou *OrderUpdate) SetAddressPhone(s string) *OrderUpdate {
	ou.mutation.SetAddressPhone(s)
	return ou
}

// SetNillableAddressPhone sets the "AddressPhone" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressPhone(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAddressPhone(*s)
	}
	return ou
}

// SetAddress sets the "Address" field.
func (ou *OrderUpdate) SetAddress(s string) *OrderUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// SetType sets the "Type" field.
func (ou *OrderUpdate) SetType(u uint64) *OrderUpdate {
	ou.mutation.ResetType()
	ou.mutation.SetType(u)
	return ou
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableType(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetType(*u)
	}
	return ou
}

// AddType adds u to the "Type" field.
func (ou *OrderUpdate) AddType(u int64) *OrderUpdate {
	ou.mutation.AddType(u)
	return ou
}

// SetPrice sets the "Price" field.
func (ou *OrderUpdate) SetPrice(i int64) *OrderUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(i)
	return ou
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePrice(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetPrice(*i)
	}
	return ou
}

// AddPrice adds i to the "Price" field.
func (ou *OrderUpdate) AddPrice(i int64) *OrderUpdate {
	ou.mutation.AddPrice(i)
	return ou
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (ou *OrderUpdate) SetUserOrderID(id uint64) *OrderUpdate {
	ou.mutation.SetUserOrderID(id)
	return ou
}

// SetNillableUserOrderID sets the "user_order" edge to the User entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserOrderID(id *uint64) *OrderUpdate {
	if id != nil {
		ou = ou.SetUserOrderID(*id)
	}
	return ou
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (ou *OrderUpdate) SetUserOrder(u *User) *OrderUpdate {
	return ou.SetUserOrderID(u.ID)
}

// SetProductOrderID sets the "product_order" edge to the Product entity by ID.
func (ou *OrderUpdate) SetProductOrderID(id uint64) *OrderUpdate {
	ou.mutation.SetProductOrderID(id)
	return ou
}

// SetNillableProductOrderID sets the "product_order" edge to the Product entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableProductOrderID(id *uint64) *OrderUpdate {
	if id != nil {
		ou = ou.SetProductOrderID(*id)
	}
	return ou
}

// SetProductOrder sets the "product_order" edge to the Product entity.
func (ou *OrderUpdate) SetProductOrder(p *Product) *OrderUpdate {
	return ou.SetProductOrderID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (ou *OrderUpdate) ClearUserOrder() *OrderUpdate {
	ou.mutation.ClearUserOrder()
	return ou
}

// ClearProductOrder clears the "product_order" edge to the Product entity.
func (ou *OrderUpdate) ClearProductOrder() *OrderUpdate {
	ou.mutation.ClearProductOrder()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.AddedNum(); ok {
		_spec.AddField(order.FieldNum, field.TypeInt32, value)
	}
	if value, ok := ou.mutation.OrderNum(); ok {
		_spec.SetField(order.FieldOrderNum, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedOrderNum(); ok {
		_spec.AddField(order.FieldOrderNum, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddressName(); ok {
		_spec.SetField(order.FieldAddressName, field.TypeString, value)
	}
	if value, ok := ou.mutation.AddressPhone(); ok {
		_spec.SetField(order.FieldAddressPhone, field.TypeString, value)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeUint64, value)
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeInt64, value)
	}
	if ou.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ProductOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductOrderTable,
			Columns: []string{order.ProductOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProductOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductOrderTable,
			Columns: []string{order.ProductOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetUserID sets the "UserID" field.
func (ouo *OrderUpdateOne) SetUserID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetUserID(u)
	return ouo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetUserID(*u)
	}
	return ouo
}

// ClearUserID clears the value of the "UserID" field.
func (ouo *OrderUpdateOne) ClearUserID() *OrderUpdateOne {
	ouo.mutation.ClearUserID()
	return ouo
}

// SetProductID sets the "ProductID" field.
func (ouo *OrderUpdateOne) SetProductID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetProductID(u)
	return ouo
}

// SetNillableProductID sets the "ProductID" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableProductID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetProductID(*u)
	}
	return ouo
}

// ClearProductID clears the value of the "ProductID" field.
func (ouo *OrderUpdateOne) ClearProductID() *OrderUpdateOne {
	ouo.mutation.ClearProductID()
	return ouo
}

// SetNum sets the "Num" field.
func (ouo *OrderUpdateOne) SetNum(i int32) *OrderUpdateOne {
	ouo.mutation.ResetNum()
	ouo.mutation.SetNum(i)
	return ouo
}

// SetNillableNum sets the "Num" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNum(i *int32) *OrderUpdateOne {
	if i != nil {
		ouo.SetNum(*i)
	}
	return ouo
}

// AddNum adds i to the "Num" field.
func (ouo *OrderUpdateOne) AddNum(i int32) *OrderUpdateOne {
	ouo.mutation.AddNum(i)
	return ouo
}

// SetOrderNum sets the "OrderNum" field.
func (ouo *OrderUpdateOne) SetOrderNum(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetOrderNum()
	ouo.mutation.SetOrderNum(u)
	return ouo
}

// SetNillableOrderNum sets the "OrderNum" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderNum(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetOrderNum(*u)
	}
	return ouo
}

// AddOrderNum adds u to the "OrderNum" field.
func (ouo *OrderUpdateOne) AddOrderNum(u int64) *OrderUpdateOne {
	ouo.mutation.AddOrderNum(u)
	return ouo
}

// SetAddressName sets the "AddressName" field.
func (ouo *OrderUpdateOne) SetAddressName(s string) *OrderUpdateOne {
	ouo.mutation.SetAddressName(s)
	return ouo
}

// SetNillableAddressName sets the "AddressName" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressName(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddressName(*s)
	}
	return ouo
}

// SetAddressPhone sets the "AddressPhone" field.
func (ouo *OrderUpdateOne) SetAddressPhone(s string) *OrderUpdateOne {
	ouo.mutation.SetAddressPhone(s)
	return ouo
}

// SetNillableAddressPhone sets the "AddressPhone" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressPhone(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddressPhone(*s)
	}
	return ouo
}

// SetAddress sets the "Address" field.
func (ouo *OrderUpdateOne) SetAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// SetType sets the "Type" field.
func (ouo *OrderUpdateOne) SetType(u uint64) *OrderUpdateOne {
	ouo.mutation.ResetType()
	ouo.mutation.SetType(u)
	return ouo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableType(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetType(*u)
	}
	return ouo
}

// AddType adds u to the "Type" field.
func (ouo *OrderUpdateOne) AddType(u int64) *OrderUpdateOne {
	ouo.mutation.AddType(u)
	return ouo
}

// SetPrice sets the "Price" field.
func (ouo *OrderUpdateOne) SetPrice(i int64) *OrderUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(i)
	return ouo
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePrice(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetPrice(*i)
	}
	return ouo
}

// AddPrice adds i to the "Price" field.
func (ouo *OrderUpdateOne) AddPrice(i int64) *OrderUpdateOne {
	ouo.mutation.AddPrice(i)
	return ouo
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetUserOrderID(id uint64) *OrderUpdateOne {
	ouo.mutation.SetUserOrderID(id)
	return ouo
}

// SetNillableUserOrderID sets the "user_order" edge to the User entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserOrderID(id *uint64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetUserOrderID(*id)
	}
	return ouo
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (ouo *OrderUpdateOne) SetUserOrder(u *User) *OrderUpdateOne {
	return ouo.SetUserOrderID(u.ID)
}

// SetProductOrderID sets the "product_order" edge to the Product entity by ID.
func (ouo *OrderUpdateOne) SetProductOrderID(id uint64) *OrderUpdateOne {
	ouo.mutation.SetProductOrderID(id)
	return ouo
}

// SetNillableProductOrderID sets the "product_order" edge to the Product entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableProductOrderID(id *uint64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetProductOrderID(*id)
	}
	return ouo
}

// SetProductOrder sets the "product_order" edge to the Product entity.
func (ouo *OrderUpdateOne) SetProductOrder(p *Product) *OrderUpdateOne {
	return ouo.SetProductOrderID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (ouo *OrderUpdateOne) ClearUserOrder() *OrderUpdateOne {
	ouo.mutation.ClearUserOrder()
	return ouo
}

// ClearProductOrder clears the "product_order" edge to the Product entity.
func (ouo *OrderUpdateOne) ClearProductOrder() *OrderUpdateOne {
	ouo.mutation.ClearProductOrder()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.AddedNum(); ok {
		_spec.AddField(order.FieldNum, field.TypeInt32, value)
	}
	if value, ok := ouo.mutation.OrderNum(); ok {
		_spec.SetField(order.FieldOrderNum, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedOrderNum(); ok {
		_spec.AddField(order.FieldOrderNum, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddressName(); ok {
		_spec.SetField(order.FieldAddressName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.AddressPhone(); ok {
		_spec.SetField(order.FieldAddressPhone, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(order.FieldAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.AddedType(); ok {
		_spec.AddField(order.FieldType, field.TypeUint64, value)
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeInt64, value)
	}
	if ouo.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ProductOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductOrderTable,
			Columns: []string{order.ProductOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProductOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductOrderTable,
			Columns: []string{order.ProductOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
