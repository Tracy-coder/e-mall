// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tracy-coder/e-mall/data/ent/order"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID uint64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// user id | 用户编号
	UserID uint64 `json:"UserID,omitempty"`
	// product id | 产品编号
	ProductID uint64 `json:"ProductID,omitempty"`
	// num | 数量
	Num int32 `json:"Num,omitempty"`
	// order number | 订单号
	OrderNum uint64 `json:"OrderNum,omitempty"`
	// name | 收件人姓名
	AddressName string `json:"AddressName,omitempty"`
	// phone number | 电话
	AddressPhone string `json:"AddressPhone,omitempty"`
	// address | 地址详情
	Address string `json:"Address,omitempty"`
	// Type | 类型
	Type uint64 `json:"Type,omitempty"`
	// Price | 价格
	Price int64 `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// UserOrder holds the value of the user_order edge.
	UserOrder *User `json:"user_order,omitempty"`
	// ProductOrder holds the value of the product_order edge.
	ProductOrder *Product `json:"product_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrderOrErr returns the UserOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) UserOrderOrErr() (*User, error) {
	if e.UserOrder != nil {
		return e.UserOrder, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_order"}
}

// ProductOrderOrErr returns the ProductOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ProductOrderOrErr() (*Product, error) {
	if e.ProductOrder != nil {
		return e.ProductOrder, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID, order.FieldUserID, order.FieldProductID, order.FieldNum, order.FieldOrderNum, order.FieldType, order.FieldPrice:
			values[i] = new(sql.NullInt64)
		case order.FieldAddressName, order.FieldAddressPhone, order.FieldAddress:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = uint64(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UserID", values[i])
			} else if value.Valid {
				o.UserID = uint64(value.Int64)
			}
		case order.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ProductID", values[i])
			} else if value.Valid {
				o.ProductID = uint64(value.Int64)
			}
		case order.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Num", values[i])
			} else if value.Valid {
				o.Num = int32(value.Int64)
			}
		case order.FieldOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OrderNum", values[i])
			} else if value.Valid {
				o.OrderNum = uint64(value.Int64)
			}
		case order.FieldAddressName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressName", values[i])
			} else if value.Valid {
				o.AddressName = value.String
			}
		case order.FieldAddressPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressPhone", values[i])
			} else if value.Valid {
				o.AddressPhone = value.String
			}
		case order.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				o.Address = value.String
			}
		case order.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				o.Type = uint64(value.Int64)
			}
		case order.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				o.Price = value.Int64
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUserOrder queries the "user_order" edge of the Order entity.
func (o *Order) QueryUserOrder() *UserQuery {
	return NewOrderClient(o.config).QueryUserOrder(o)
}

// QueryProductOrder queries the "product_order" edge of the Order entity.
func (o *Order) QueryProductOrder() *ProductQuery {
	return NewOrderClient(o.config).QueryProductOrder(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UserID=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("ProductID=")
	builder.WriteString(fmt.Sprintf("%v", o.ProductID))
	builder.WriteString(", ")
	builder.WriteString("Num=")
	builder.WriteString(fmt.Sprintf("%v", o.Num))
	builder.WriteString(", ")
	builder.WriteString("OrderNum=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderNum))
	builder.WriteString(", ")
	builder.WriteString("AddressName=")
	builder.WriteString(o.AddressName)
	builder.WriteString(", ")
	builder.WriteString("AddressPhone=")
	builder.WriteString(o.AddressPhone)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(o.Address)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", o.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
