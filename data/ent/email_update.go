// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/email"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// EmailUpdate is the builder for updating Email entities.
type EmailUpdate struct {
	config
	hooks    []Hook
	mutation *EmailMutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (eu *EmailUpdate) Where(ps ...predicate.Email) *EmailUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmailUpdate) SetUpdatedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetStatus sets the "status" field.
func (eu *EmailUpdate) SetStatus(u uint8) *EmailUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(u)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableStatus(u *uint8) *EmailUpdate {
	if u != nil {
		eu.SetStatus(*u)
	}
	return eu
}

// AddStatus adds u to the "status" field.
func (eu *EmailUpdate) AddStatus(u int8) *EmailUpdate {
	eu.mutation.AddStatus(u)
	return eu
}

// ClearStatus clears the value of the "status" field.
func (eu *EmailUpdate) ClearStatus() *EmailUpdate {
	eu.mutation.ClearStatus()
	return eu
}

// SetEmail sets the "email" field.
func (eu *EmailUpdate) SetEmail(s string) *EmailUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableEmail(s *string) *EmailUpdate {
	if s != nil {
		eu.SetEmail(*s)
	}
	return eu
}

// SetIsVerified sets the "is_verified" field.
func (eu *EmailUpdate) SetIsVerified(b bool) *EmailUpdate {
	eu.mutation.SetIsVerified(b)
	return eu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableIsVerified(b *bool) *EmailUpdate {
	if b != nil {
		eu.SetIsVerified(*b)
	}
	return eu
}

// ClearIsVerified clears the value of the "is_verified" field.
func (eu *EmailUpdate) ClearIsVerified() *EmailUpdate {
	eu.mutation.ClearIsVerified()
	return eu
}

// SetSecret sets the "secret" field.
func (eu *EmailUpdate) SetSecret(s string) *EmailUpdate {
	eu.mutation.SetSecret(s)
	return eu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableSecret(s *string) *EmailUpdate {
	if s != nil {
		eu.SetSecret(*s)
	}
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EmailUpdate) SetUserID(u uint64) *EmailUpdate {
	eu.mutation.ResetUserID()
	eu.mutation.SetUserID(u)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableUserID(u *uint64) *EmailUpdate {
	if u != nil {
		eu.SetUserID(*u)
	}
	return eu
}

// AddUserID adds u to the "user_id" field.
func (eu *EmailUpdate) AddUserID(u int64) *EmailUpdate {
	eu.mutation.AddUserID(u)
	return eu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (eu *EmailUpdate) SetOwnerID(id uint64) *EmailUpdate {
	eu.mutation.SetOwnerID(id)
	return eu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (eu *EmailUpdate) SetNillableOwnerID(id *uint64) *EmailUpdate {
	if id != nil {
		eu = eu.SetOwnerID(*id)
	}
	return eu
}

// SetOwner sets the "owner" edge to the User entity.
func (eu *EmailUpdate) SetOwner(u *User) *EmailUpdate {
	return eu.SetOwnerID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (eu *EmailUpdate) Mutation() *EmailMutation {
	return eu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (eu *EmailUpdate) ClearOwner() *EmailUpdate {
	eu.mutation.ClearOwner()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmailUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmailUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmailUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmailUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := email.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *EmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(email.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.AddField(email.FieldStatus, field.TypeUint8, value)
	}
	if eu.mutation.StatusCleared() {
		_spec.ClearField(email.FieldStatus, field.TypeUint8)
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.SetField(email.FieldEmail, field.TypeString, value)
	}
	if value, ok := eu.mutation.IsVerified(); ok {
		_spec.SetField(email.FieldIsVerified, field.TypeBool, value)
	}
	if eu.mutation.IsVerifiedCleared() {
		_spec.ClearField(email.FieldIsVerified, field.TypeBool)
	}
	if value, ok := eu.mutation.Secret(); ok {
		_spec.SetField(email.FieldSecret, field.TypeString, value)
	}
	if value, ok := eu.mutation.UserID(); ok {
		_spec.SetField(email.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := eu.mutation.AddedUserID(); ok {
		_spec.AddField(email.FieldUserID, field.TypeUint64, value)
	}
	if eu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.OwnerTable,
			Columns: []string{email.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.OwnerTable,
			Columns: []string{email.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmailUpdateOne is the builder for updating a single Email entity.
type EmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmailUpdateOne) SetUpdatedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetStatus sets the "status" field.
func (euo *EmailUpdateOne) SetStatus(u uint8) *EmailUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(u)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableStatus(u *uint8) *EmailUpdateOne {
	if u != nil {
		euo.SetStatus(*u)
	}
	return euo
}

// AddStatus adds u to the "status" field.
func (euo *EmailUpdateOne) AddStatus(u int8) *EmailUpdateOne {
	euo.mutation.AddStatus(u)
	return euo
}

// ClearStatus clears the value of the "status" field.
func (euo *EmailUpdateOne) ClearStatus() *EmailUpdateOne {
	euo.mutation.ClearStatus()
	return euo
}

// SetEmail sets the "email" field.
func (euo *EmailUpdateOne) SetEmail(s string) *EmailUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableEmail(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetEmail(*s)
	}
	return euo
}

// SetIsVerified sets the "is_verified" field.
func (euo *EmailUpdateOne) SetIsVerified(b bool) *EmailUpdateOne {
	euo.mutation.SetIsVerified(b)
	return euo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableIsVerified(b *bool) *EmailUpdateOne {
	if b != nil {
		euo.SetIsVerified(*b)
	}
	return euo
}

// ClearIsVerified clears the value of the "is_verified" field.
func (euo *EmailUpdateOne) ClearIsVerified() *EmailUpdateOne {
	euo.mutation.ClearIsVerified()
	return euo
}

// SetSecret sets the "secret" field.
func (euo *EmailUpdateOne) SetSecret(s string) *EmailUpdateOne {
	euo.mutation.SetSecret(s)
	return euo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableSecret(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetSecret(*s)
	}
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EmailUpdateOne) SetUserID(u uint64) *EmailUpdateOne {
	euo.mutation.ResetUserID()
	euo.mutation.SetUserID(u)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUserID(u *uint64) *EmailUpdateOne {
	if u != nil {
		euo.SetUserID(*u)
	}
	return euo
}

// AddUserID adds u to the "user_id" field.
func (euo *EmailUpdateOne) AddUserID(u int64) *EmailUpdateOne {
	euo.mutation.AddUserID(u)
	return euo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (euo *EmailUpdateOne) SetOwnerID(id uint64) *EmailUpdateOne {
	euo.mutation.SetOwnerID(id)
	return euo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableOwnerID(id *uint64) *EmailUpdateOne {
	if id != nil {
		euo = euo.SetOwnerID(*id)
	}
	return euo
}

// SetOwner sets the "owner" edge to the User entity.
func (euo *EmailUpdateOne) SetOwner(u *User) *EmailUpdateOne {
	return euo.SetOwnerID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (euo *EmailUpdateOne) Mutation() *EmailMutation {
	return euo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (euo *EmailUpdateOne) ClearOwner() *EmailUpdateOne {
	euo.mutation.ClearOwner()
	return euo
}

// Where appends a list predicates to the EmailUpdate builder.
func (euo *EmailUpdateOne) Where(ps ...predicate.Email) *EmailUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmailUpdateOne) Select(field string, fields ...string) *EmailUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Email entity.
func (euo *EmailUpdateOne) Save(ctx context.Context) (*Email, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmailUpdateOne) SaveX(ctx context.Context) *Email {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmailUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmailUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmailUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := email.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *EmailUpdateOne) sqlSave(ctx context.Context) (_node *Email, err error) {
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Email.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, email.FieldID)
		for _, f := range fields {
			if !email.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != email.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(email.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.AddField(email.FieldStatus, field.TypeUint8, value)
	}
	if euo.mutation.StatusCleared() {
		_spec.ClearField(email.FieldStatus, field.TypeUint8)
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.SetField(email.FieldEmail, field.TypeString, value)
	}
	if value, ok := euo.mutation.IsVerified(); ok {
		_spec.SetField(email.FieldIsVerified, field.TypeBool, value)
	}
	if euo.mutation.IsVerifiedCleared() {
		_spec.ClearField(email.FieldIsVerified, field.TypeBool)
	}
	if value, ok := euo.mutation.Secret(); ok {
		_spec.SetField(email.FieldSecret, field.TypeString, value)
	}
	if value, ok := euo.mutation.UserID(); ok {
		_spec.SetField(email.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := euo.mutation.AddedUserID(); ok {
		_spec.AddField(email.FieldUserID, field.TypeUint64, value)
	}
	if euo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.OwnerTable,
			Columns: []string{email.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.OwnerTable,
			Columns: []string{email.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Email{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
