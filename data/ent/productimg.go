// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/productimg"
)

// ProductImg is the model entity for the ProductImg schema.
type ProductImg struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID uint64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// image path | 商品图片
	ImgPath string `json:"img_path,omitempty"`
	// product ID | 产品编号
	ProductID uint64 `json:"productID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductImgQuery when eager-loading is set.
	Edges        ProductImgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductImgEdges holds the relations/edges for other nodes in the graph.
type ProductImgEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductImgEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductImg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productimg.FieldID, productimg.FieldProductID:
			values[i] = new(sql.NullInt64)
		case productimg.FieldImgPath:
			values[i] = new(sql.NullString)
		case productimg.FieldCreatedAt, productimg.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductImg fields.
func (pi *ProductImg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productimg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = uint64(value.Int64)
		case productimg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case productimg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case productimg.FieldImgPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_path", values[i])
			} else if value.Valid {
				pi.ImgPath = value.String
			}
		case productimg.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field productID", values[i])
			} else if value.Valid {
				pi.ProductID = uint64(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductImg.
// This includes values selected through modifiers, order, etc.
func (pi *ProductImg) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductImg entity.
func (pi *ProductImg) QueryProduct() *ProductQuery {
	return NewProductImgClient(pi.config).QueryProduct(pi)
}

// Update returns a builder for updating this ProductImg.
// Note that you need to call ProductImg.Unwrap() before calling this method if this ProductImg
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductImg) Update() *ProductImgUpdateOne {
	return NewProductImgClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductImg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductImg) Unwrap() *ProductImg {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductImg is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductImg) String() string {
	var builder strings.Builder
	builder.WriteString("ProductImg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("img_path=")
	builder.WriteString(pi.ImgPath)
	builder.WriteString(", ")
	builder.WriteString("productID=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProductID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductImgs is a parsable slice of ProductImg.
type ProductImgs []*ProductImg
