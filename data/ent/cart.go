// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Tracy-coder/e-mall/data/ent/cart"
	"github.com/Tracy-coder/e-mall/data/ent/product"
	"github.com/Tracy-coder/e-mall/data/ent/user"
)

// Cart is the model entity for the Cart schema.
type Cart struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID uint64 `json:"id,omitempty"`
	// created time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// last update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// user id | 用户编号
	UserID uint64 `json:"UserID,omitempty"`
	// product id | 产品编号
	ProductID uint64 `json:"ProductID,omitempty"`
	// num | 数量
	Num int32 `json:"Num,omitempty"`
	// max num | 最大数量
	MaxNum int32 `json:"MaxNum,omitempty"`
	// check
	Check bool `json:"Check,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartQuery when eager-loading is set.
	Edges        CartEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CartEdges holds the relations/edges for other nodes in the graph.
type CartEdges struct {
	// UserCart holds the value of the user_cart edge.
	UserCart *User `json:"user_cart,omitempty"`
	// ProductCart holds the value of the product_cart edge.
	ProductCart *Product `json:"product_cart,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserCartOrErr returns the UserCart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartEdges) UserCartOrErr() (*User, error) {
	if e.UserCart != nil {
		return e.UserCart, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_cart"}
}

// ProductCartOrErr returns the ProductCart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartEdges) ProductCartOrErr() (*Product, error) {
	if e.ProductCart != nil {
		return e.ProductCart, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product_cart"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cart) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cart.FieldCheck:
			values[i] = new(sql.NullBool)
		case cart.FieldID, cart.FieldUserID, cart.FieldProductID, cart.FieldNum, cart.FieldMaxNum:
			values[i] = new(sql.NullInt64)
		case cart.FieldCreatedAt, cart.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cart fields.
func (c *Cart) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cart.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case cart.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cart.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cart.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UserID", values[i])
			} else if value.Valid {
				c.UserID = uint64(value.Int64)
			}
		case cart.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ProductID", values[i])
			} else if value.Valid {
				c.ProductID = uint64(value.Int64)
			}
		case cart.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Num", values[i])
			} else if value.Valid {
				c.Num = int32(value.Int64)
			}
		case cart.FieldMaxNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field MaxNum", values[i])
			} else if value.Valid {
				c.MaxNum = int32(value.Int64)
			}
		case cart.FieldCheck:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Check", values[i])
			} else if value.Valid {
				c.Check = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cart.
// This includes values selected through modifiers, order, etc.
func (c *Cart) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUserCart queries the "user_cart" edge of the Cart entity.
func (c *Cart) QueryUserCart() *UserQuery {
	return NewCartClient(c.config).QueryUserCart(c)
}

// QueryProductCart queries the "product_cart" edge of the Cart entity.
func (c *Cart) QueryProductCart() *ProductQuery {
	return NewCartClient(c.config).QueryProductCart(c)
}

// Update returns a builder for updating this Cart.
// Note that you need to call Cart.Unwrap() before calling this method if this Cart
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cart) Update() *CartUpdateOne {
	return NewCartClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cart) Unwrap() *Cart {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cart is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cart) String() string {
	var builder strings.Builder
	builder.WriteString("Cart(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UserID=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("ProductID=")
	builder.WriteString(fmt.Sprintf("%v", c.ProductID))
	builder.WriteString(", ")
	builder.WriteString("Num=")
	builder.WriteString(fmt.Sprintf("%v", c.Num))
	builder.WriteString(", ")
	builder.WriteString("MaxNum=")
	builder.WriteString(fmt.Sprintf("%v", c.MaxNum))
	builder.WriteString(", ")
	builder.WriteString("Check=")
	builder.WriteString(fmt.Sprintf("%v", c.Check))
	builder.WriteByte(')')
	return builder.String()
}

// Carts is a parsable slice of Cart.
type Carts []*Cart
