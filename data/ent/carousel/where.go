// Code generated by ent, DO NOT EDIT.

package carousel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductID applies equality check predicate on the "ProductID" field. It's identical to ProductIDEQ.
func ProductID(v uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldProductID, v))
}

// ImgPath applies equality check predicate on the "ImgPath" field. It's identical to ImgPathEQ.
func ImgPath(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldImgPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Carousel {
	return predicate.Carousel(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProductIDEQ applies the EQ predicate on the "ProductID" field.
func ProductIDEQ(v uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "ProductID" field.
func ProductIDNEQ(v uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "ProductID" field.
func ProductIDIn(vs ...uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "ProductID" field.
func ProductIDNotIn(vs ...uint64) predicate.Carousel {
	return predicate.Carousel(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "ProductID" field.
func ProductIDIsNil() predicate.Carousel {
	return predicate.Carousel(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "ProductID" field.
func ProductIDNotNil() predicate.Carousel {
	return predicate.Carousel(sql.FieldNotNull(FieldProductID))
}

// ImgPathEQ applies the EQ predicate on the "ImgPath" field.
func ImgPathEQ(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldEQ(FieldImgPath, v))
}

// ImgPathNEQ applies the NEQ predicate on the "ImgPath" field.
func ImgPathNEQ(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldNEQ(FieldImgPath, v))
}

// ImgPathIn applies the In predicate on the "ImgPath" field.
func ImgPathIn(vs ...string) predicate.Carousel {
	return predicate.Carousel(sql.FieldIn(FieldImgPath, vs...))
}

// ImgPathNotIn applies the NotIn predicate on the "ImgPath" field.
func ImgPathNotIn(vs ...string) predicate.Carousel {
	return predicate.Carousel(sql.FieldNotIn(FieldImgPath, vs...))
}

// ImgPathGT applies the GT predicate on the "ImgPath" field.
func ImgPathGT(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldGT(FieldImgPath, v))
}

// ImgPathGTE applies the GTE predicate on the "ImgPath" field.
func ImgPathGTE(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldGTE(FieldImgPath, v))
}

// ImgPathLT applies the LT predicate on the "ImgPath" field.
func ImgPathLT(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldLT(FieldImgPath, v))
}

// ImgPathLTE applies the LTE predicate on the "ImgPath" field.
func ImgPathLTE(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldLTE(FieldImgPath, v))
}

// ImgPathContains applies the Contains predicate on the "ImgPath" field.
func ImgPathContains(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldContains(FieldImgPath, v))
}

// ImgPathHasPrefix applies the HasPrefix predicate on the "ImgPath" field.
func ImgPathHasPrefix(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldHasPrefix(FieldImgPath, v))
}

// ImgPathHasSuffix applies the HasSuffix predicate on the "ImgPath" field.
func ImgPathHasSuffix(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldHasSuffix(FieldImgPath, v))
}

// ImgPathEqualFold applies the EqualFold predicate on the "ImgPath" field.
func ImgPathEqualFold(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldEqualFold(FieldImgPath, v))
}

// ImgPathContainsFold applies the ContainsFold predicate on the "ImgPath" field.
func ImgPathContainsFold(v string) predicate.Carousel {
	return predicate.Carousel(sql.FieldContainsFold(FieldImgPath, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Carousel {
	return predicate.Carousel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Product) predicate.Carousel {
	return predicate.Carousel(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Carousel) predicate.Carousel {
	return predicate.Carousel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Carousel) predicate.Carousel {
	return predicate.Carousel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Carousel) predicate.Carousel {
	return predicate.Carousel(sql.NotPredicates(p))
}
