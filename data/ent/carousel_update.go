// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Tracy-coder/e-mall/data/ent/carousel"
	"github.com/Tracy-coder/e-mall/data/ent/predicate"
	"github.com/Tracy-coder/e-mall/data/ent/product"
)

// CarouselUpdate is the builder for updating Carousel entities.
type CarouselUpdate struct {
	config
	hooks    []Hook
	mutation *CarouselMutation
}

// Where appends a list predicates to the CarouselUpdate builder.
func (cu *CarouselUpdate) Where(ps ...predicate.Carousel) *CarouselUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CarouselUpdate) SetUpdatedAt(t time.Time) *CarouselUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetProductID sets the "ProductID" field.
func (cu *CarouselUpdate) SetProductID(u uint64) *CarouselUpdate {
	cu.mutation.SetProductID(u)
	return cu
}

// SetNillableProductID sets the "ProductID" field if the given value is not nil.
func (cu *CarouselUpdate) SetNillableProductID(u *uint64) *CarouselUpdate {
	if u != nil {
		cu.SetProductID(*u)
	}
	return cu
}

// ClearProductID clears the value of the "ProductID" field.
func (cu *CarouselUpdate) ClearProductID() *CarouselUpdate {
	cu.mutation.ClearProductID()
	return cu
}

// SetImgPath sets the "ImgPath" field.
func (cu *CarouselUpdate) SetImgPath(s string) *CarouselUpdate {
	cu.mutation.SetImgPath(s)
	return cu
}

// SetNillableImgPath sets the "ImgPath" field if the given value is not nil.
func (cu *CarouselUpdate) SetNillableImgPath(s *string) *CarouselUpdate {
	if s != nil {
		cu.SetImgPath(*s)
	}
	return cu
}

// SetOwnerID sets the "owner" edge to the Product entity by ID.
func (cu *CarouselUpdate) SetOwnerID(id uint64) *CarouselUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the Product entity by ID if the given value is not nil.
func (cu *CarouselUpdate) SetNillableOwnerID(id *uint64) *CarouselUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the Product entity.
func (cu *CarouselUpdate) SetOwner(p *Product) *CarouselUpdate {
	return cu.SetOwnerID(p.ID)
}

// Mutation returns the CarouselMutation object of the builder.
func (cu *CarouselUpdate) Mutation() *CarouselMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the Product entity.
func (cu *CarouselUpdate) ClearOwner() *CarouselUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarouselUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarouselUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarouselUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarouselUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CarouselUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := carousel.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CarouselUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carousel.Table, carousel.Columns, sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(carousel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ImgPath(); ok {
		_spec.SetField(carousel.FieldImgPath, field.TypeString, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carousel.OwnerTable,
			Columns: []string{carousel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carousel.OwnerTable,
			Columns: []string{carousel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carousel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarouselUpdateOne is the builder for updating a single Carousel entity.
type CarouselUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarouselMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CarouselUpdateOne) SetUpdatedAt(t time.Time) *CarouselUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetProductID sets the "ProductID" field.
func (cuo *CarouselUpdateOne) SetProductID(u uint64) *CarouselUpdateOne {
	cuo.mutation.SetProductID(u)
	return cuo
}

// SetNillableProductID sets the "ProductID" field if the given value is not nil.
func (cuo *CarouselUpdateOne) SetNillableProductID(u *uint64) *CarouselUpdateOne {
	if u != nil {
		cuo.SetProductID(*u)
	}
	return cuo
}

// ClearProductID clears the value of the "ProductID" field.
func (cuo *CarouselUpdateOne) ClearProductID() *CarouselUpdateOne {
	cuo.mutation.ClearProductID()
	return cuo
}

// SetImgPath sets the "ImgPath" field.
func (cuo *CarouselUpdateOne) SetImgPath(s string) *CarouselUpdateOne {
	cuo.mutation.SetImgPath(s)
	return cuo
}

// SetNillableImgPath sets the "ImgPath" field if the given value is not nil.
func (cuo *CarouselUpdateOne) SetNillableImgPath(s *string) *CarouselUpdateOne {
	if s != nil {
		cuo.SetImgPath(*s)
	}
	return cuo
}

// SetOwnerID sets the "owner" edge to the Product entity by ID.
func (cuo *CarouselUpdateOne) SetOwnerID(id uint64) *CarouselUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the Product entity by ID if the given value is not nil.
func (cuo *CarouselUpdateOne) SetNillableOwnerID(id *uint64) *CarouselUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the Product entity.
func (cuo *CarouselUpdateOne) SetOwner(p *Product) *CarouselUpdateOne {
	return cuo.SetOwnerID(p.ID)
}

// Mutation returns the CarouselMutation object of the builder.
func (cuo *CarouselUpdateOne) Mutation() *CarouselMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the Product entity.
func (cuo *CarouselUpdateOne) ClearOwner() *CarouselUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Where appends a list predicates to the CarouselUpdate builder.
func (cuo *CarouselUpdateOne) Where(ps ...predicate.Carousel) *CarouselUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarouselUpdateOne) Select(field string, fields ...string) *CarouselUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Carousel entity.
func (cuo *CarouselUpdateOne) Save(ctx context.Context) (*Carousel, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarouselUpdateOne) SaveX(ctx context.Context) *Carousel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarouselUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarouselUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CarouselUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := carousel.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CarouselUpdateOne) sqlSave(ctx context.Context) (_node *Carousel, err error) {
	_spec := sqlgraph.NewUpdateSpec(carousel.Table, carousel.Columns, sqlgraph.NewFieldSpec(carousel.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Carousel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carousel.FieldID)
		for _, f := range fields {
			if !carousel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carousel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(carousel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ImgPath(); ok {
		_spec.SetField(carousel.FieldImgPath, field.TypeString, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carousel.OwnerTable,
			Columns: []string{carousel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carousel.OwnerTable,
			Columns: []string{carousel.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Carousel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carousel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
